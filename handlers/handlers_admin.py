import asyncio
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import Bot, types, F, Router
from aiogram.filters import Command, StateFilter, BaseFilter
from aiogram.fsm.context import FSMContext
from database.orm_query import orm_add_DefQuestion, orm_add_admin, orm_add_car, orm_add_manager, orm_delete_DefQuestion, orm_delete_admin, orm_delete_manager, orm_get_DefQuestions, orm_get_admin, orm_get_admins, orm_get_managers
from filters.chat_filters import ChatTypeFilter
import config

from aiogram.utils.media_group import MediaGroupBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.handlers_user import Statess
from keybords.inline_kbds import get_callback_btns, get_callback_btns_single_row
from keybords.return_kbds import admin_menu, access_settings, admin_settings, manager_settings, auto_settings, add_del_back_menu
# from keybords.inline_kbds import get_callback_btns

bot = Bot(token=config.API_TOKEN)


#################################   –§–∏–ª—å—Ç—Ä –≥—Ä—É–ø–ø   #################################

admin_router = Router()
admin_router.message.filter(ChatTypeFilter(['private'])) # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
# user_group_router.message.middleware(AlbumMiddleware())

#################################   –ö–æ–º–∞–Ω–¥—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞   #################################

@admin_router.message(StateFilter('*'), Command("admin"))
async def send_welcome(message: types.Message, state: FSMContext, session: AsyncSession):
    await message.delete()
    admins = await orm_get_admins(session)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
    managers = await orm_get_managers(session)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ë–î

    adminss = {admin.id: admin.name for admin in admins}
    managerss = {manager.id: manager.name for manager in managers}

    admins_ids = list(adminss.keys())
    managers_ids = list(managerss.keys())

    if message.from_user.id in admins_ids:
        name = adminss.get(message.from_user.id)    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞ –ø–æ ID
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}", reply_markup=admin_menu.as_markup(
                            resize_keyboard=True))
        await state.set_state(Statess.Admin_kbd)






























############################################ –∫–Ω–æ–ø–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º" ############################################

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await message.delete()
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞", reply_markup=access_settings.as_markup(
                            resize_keyboard=True))


##### –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await message.delete()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", reply_markup=admin_settings.as_markup(
                            resize_keyboard=True))
    await state.set_state(Statess.Admin_settings)
    

@admin_router.message(Statess.Admin_settings, F.text.casefold().contains("–¥–æ–±–∞–≤–∏—Ç—å"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¥–æ–±–∞–≤–∏—Ç—å"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await message.delete()
    admins = await orm_get_admins(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
    managers = await orm_get_managers(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ë–î

    adminss = {admin.name: f"{admin.id}" for admin in admins}
    managerss = {manager.name : f"{manager.id}" for manager in managers}

    admins = [int(admin) for admin in adminss.values()]
    managers = [int(manager) for manager in managerss.values()]

    if message.from_user.id in admins:
        delmes = await message.answer("–ö–∞–∫ –∑–æ–≤—É—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?")
        await state.set_state(Statess.add_admin_name)
        

@admin_router.message(Statess.add_admin_name, F.text)  # –î–æ–±–∞–≤–ª—è–µ—Ç id –∞–¥–º–∏–Ω–∞
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(name = message.text)
    await message.delete()

    delmes = await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ id –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(Statess.add_admin_id)


@admin_router.message(Statess.add_admin_id, F.text)  # –î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –≤ –ë–î
async def cancel_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    adminId = int(message.text)
    await state.update_data(id = adminId)
    await message.delete()
    vokeb = await state.get_data()

    await orm_add_admin(session, vokeb)
    await state.set_state(Statess.Admin_settings)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=admin_settings.as_markup(
                            resize_keyboard=True))
    

@admin_router.message(Statess.Admin_settings, F.text.casefold().contains("—É–¥–∞–ª–∏—Ç—å"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "—É–¥–∞–ª–∏—Ç—å"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    admins = await orm_get_admins(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î

    adminss = {admin.name: f"{admin.id}" for admin in admins}

    admins = [int(admin) for admin in adminss.values()]
    
    if message.from_user.id in admins:
        await message.delete()
        admins = await orm_get_admins(session)

        adminess = {admin.name: f"delAdmin_{admin.id}" for admin in admins}

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_callback_btns(btns=adminess))


@admin_router.callback_query(F.data.startswith("delAdmin_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ id
async def inline_button_handler(callback: types.CallbackQuery, session: AsyncSession):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()
    admin = callback.data.replace("delAdmin_", "")

    await orm_delete_admin(session, int(admin))
    delmes = await callback.message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—ë–Ω!")
    await asyncio.sleep(5)
    await bot.delete_message(callback.message.chat.id, delmes.message_id)


@admin_router.callback_query(F.data.startswith("admin_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def inline_button_handler(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.delete()


@admin_router.message(Statess.Admin_settings, F.text.casefold().contains("—Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "—É–¥–∞–ª–∏—Ç—å"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    admins = await orm_get_admins(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
    managers = await orm_get_managers(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ë–î

    adminss = {admin.name: f"{admin.id}" for admin in admins}
    managerss = {manager.name : f"{manager.id}" for manager in managers}

    admins = [int(admin) for admin in adminss.values()]
    managers = [int(manager) for manager in managerss.values()]
    await message.delete()
    
    if message.from_user.id in admins:
        admins = await orm_get_admins(session)

        adminess = {admin.name: f"admin_{admin.id}" for admin in admins}

        await message.answer("–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:", reply_markup=get_callback_btns(btns=adminess))

@admin_router.message(Statess.Admin_settings, F.text.casefold().contains("–Ω–∞–∑–∞–¥"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–º–µ–Ω–µ–¥–∂–µ—Ä—ã"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await message.delete()
    await state.set_state(Statess.Admin_kbd)
    await message.answer("–ù–∞–∑–∞–¥üîô", reply_markup=access_settings.as_markup(
                            resize_keyboard=True))

##### –ú–µ–Ω–µ–¥–∂–µ—Ä—ã

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("–º–µ–Ω–µ–¥–∂–µ—Ä—ã"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–º–µ–Ω–µ–¥–∂–µ—Ä—ã"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await message.delete()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ú–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏", reply_markup=manager_settings.as_markup(
                            resize_keyboard=True))
    await state.set_state(Statess.Manager_settings)


@admin_router.message(Statess.Manager_settings, F.text.casefold().contains("—Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "—Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await message.delete()
    admins = await orm_get_admins(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
    managers = await orm_get_managers(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ë–î

    adminss = {admin.name: f"{admin.id}" for admin in admins}
    managerss = {manager.name : f"{manager.id}" for manager in managers}

    admins = [int(admin) for admin in adminss.values()]
    managers = [int(manager) for manager in managerss.values()]

    if (message.from_user.id in admins ) | (message.from_user.id in managers):
        managers = await orm_get_managers(session)

        managerss = {manager.name: f"manager_{manager.id}" for manager in managers}

        await message.answer("–°–ø–∏—Å–æ–∫ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:", reply_markup=get_callback_btns(btns=managerss))


@admin_router.message(Statess.Manager_settings, F.text.casefold().contains("–¥–æ–±–∞–≤–∏—Ç—å"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¥–æ–±–∞–≤–∏—Ç—å"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await message.delete()
    admins = await orm_get_admins(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î

    adminss = {admin.name: f"{admin.id}" for admin in admins}

    admins = [int(admin) for admin in adminss.values()]

    if message.from_user.id in admins:
        delmes = await message.answer("–ö–∞–∫ –∑–æ–≤—É—Ç –ú–µ–Ω–µ–¥–∂–µ—Ä–∞?")
        await state.set_state(Statess.add_manager_name)


@admin_router.message(Statess.add_manager_name, F.text)  # –î–æ–±–∞–≤–ª—è–µ—Ç id –º–µ–Ω–µ–¥–∂–µ—Ä–∞
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(name = message.text)
    await message.delete()

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ id –ú–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    await state.set_state(Statess.add_manager_id)


@admin_router.message(Statess.add_manager_id, F.text)  # –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –ë–î
async def cancel_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    await state.update_data(id = int(message.text))
    await message.delete()
    vokeb = await state.get_data()

    await orm_add_manager(session, vokeb)
    await state.set_state(Statess.Manager_settings)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä!", reply_markup=manager_settings.as_markup(
                            resize_keyboard=True))


@admin_router.message(Statess.Manager_settings, F.text.casefold().contains("—É–¥–∞–ª–∏—Ç—å"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¥–æ–±–∞–≤–∏—Ç—å"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await message.delete()
    admins = await orm_get_admins(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î

    adminss = {admin.name: f"{admin.id}" for admin in admins}

    admins = [int(admin) for admin in adminss.values()]

    if message.from_user.id in admins:
        managers = await orm_get_managers(session)

        managerss = {manager.name: f"delManager_{manager.id}" for manager in managers}

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_callback_btns(btns=managerss))


@admin_router.callback_query(F.data.startswith("delManager_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ id
async def inline_button_handler(callback: types.CallbackQuery, session: AsyncSession):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()
    manager = callback.data.replace("delManager_", "")

    await orm_delete_manager(session, int(manager))
    delmes = await callback.message.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª—ë–Ω!")


@admin_router.callback_query(F.data.startswith("manager_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
async def inline_button_handler(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()


@admin_router.message(Statess.Manager_settings, F.text.casefold().contains("–Ω–∞–∑–∞–¥"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await message.delete()
    await state.set_state(Statess.Admin_kbd)
    await message.answer("–ù–∞–∑–∞–¥üîô", reply_markup=access_settings.as_markup(
                            resize_keyboard=True))


##### –ù–∞–∑–∞–¥ –∏ –ø—Ä–æ—á–µ–µ

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("–Ω–∞–∑–∞–¥"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô", reply_markup=admin_menu.as_markup(
                            resize_keyboard=True))



















############################################ –∫–Ω–æ–ø–∫–∞ "–ë–∞–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π" ############################################

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("–±–∞–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤", reply_markup=auto_settings.as_markup(
                            resize_keyboard=True))

    

########### –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("–¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    usemes = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É:",
        reply_markup=get_callback_btns(btns={
            'üîô –ù–∞–∑–∞–¥': f'back_to_main_new',
        }),
        )
    mes = usemes.message_id
    await state.update_data(mes = mes)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(Statess.Model)


@admin_router.message(Statess.Model, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(mark = message.text)
    await message.delete()
    vokeb = await state.get_data()
    mes = int(vokeb.get("mes"))

    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_mark_{mes}',
            }),)
    await state.set_state(Statess.Year)



@admin_router.message(Statess.Year, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(model = message.text)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_model_{mes}',
            }),)
    await state.set_state(Statess.engine)


@admin_router.message(Statess.engine, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    year = int(message.text)
    await state.update_data(year = year)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–£–∫–∞–∂–∏—Ç–µ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_year_{mes}',
            }),)
    await state.set_state(Statess.places)



@admin_router.message(Statess.places, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    engine_volume = float(message.text)
    await state.update_data(engine_volume = engine_volume)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_engine_{mes}',
            }),)
    await state.set_state(Statess.route)


@admin_router.message(Statess.route, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    places = int(message.text)
    await state.update_data(places = places)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –≤ –∫–º:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_place_{mes}',
            }),)
    await state.set_state(Statess.engine_type)


@admin_router.message(Statess.engine_type, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    route = float(message.text)
    await state.update_data(route = route)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_route_{mes}',
            }),)
    await state.set_state(Statess.box)



@admin_router.message(Statess.box, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    engine_type = message.text
    await state.update_data(engine_type = engine_type)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_engine_type_{mes}',
            }),)
    await state.set_state(Statess.foto)



@admin_router.message(Statess.foto, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    box = message.text
    await state.update_data(box = box)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_box_{mes}',
            }),)
    await state.set_state(Statess.electrocar)


@admin_router.message(Statess.electrocar, F.photo)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    foto = message.photo[-1].file_id
    await state.update_data(foto = foto)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–≠–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä?", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                '–î–∞ üîã': f'yes_{mes}',
                '–ù–µ—Ç ‚ùå': f'no_{mes}',
                'üîô –ù–∞–∑–∞–¥': f'back_to_foto_{mes}',
            }),)


@admin_router.callback_query(Statess.electrocar, F.data.startswith("yes_"))            # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
async def start_handler(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    mesID = callback.message.message_id
    await state.update_data(electrocar = "–ù–µ—Ç")
    await bot.edit_message_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", 
        callback.message.chat.id, 
        mesID, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_electrocar_{mesID}',
            }),)
    
    await state.set_state(Statess.cost)


@admin_router.callback_query(Statess.electrocar, F.data.startswith("no_"))            # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
async def start_handler(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    mesID = callback.message.message_id
    await state.update_data(electrocar = "–î–∞")
    await bot.edit_message_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", 
        callback.message.chat.id, 
        mesID, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_electrocar_{mesID}',
            }),)
    
    await state.set_state(Statess.cost)


@admin_router.message(Statess.cost, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    cost = float(message.text)
    await state.update_data(cost = cost)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∞–≤—Ç–æ:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π üî•': f'popular_{mes}',
                '–í –ø—É—Ç–∏ üó∫Ô∏è': f'in_route_{mes}',
                '–í –Ω–∞–ª–∏—á–∏–∏ üèÅ': f'in_case_{mes}',
                'üîô –ù–∞–∑–∞–¥': f'back_to_cost_{mes}',
            }),)



@admin_router.callback_query(Statess.cost, F.data.startswith("in_case_"))
@admin_router.callback_query(Statess.cost, F.data.startswith("in_route_"))
@admin_router.callback_query(Statess.cost, F.data.startswith("popular_"))            # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
async def start_handler(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    mesID = callback.message.message_id
    if callback.data.startswith("in_case_"):
        await state.update_data(flag = "–í –Ω–∞–ª–∏—á–∏–∏")
    
    if callback.data.startswith("in_route_"):
        await state.update_data(flag = "–í –ø—É—Ç–∏")

    if callback.data.startswith("popular_"):
        await state.update_data(flag = "–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ")

    vokeb = await state.get_data()
    await orm_add_car(session, vokeb)
    await bot.edit_message_text(
        f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!", 
        callback.message.chat.id, 
        mesID, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_main_{mesID}',
            }),)















############################################ –∫–Ω–æ–ø–∫–∞ "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã" ############################################

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("—á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "—á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=add_del_back_menu.as_markup(
                            resize_keyboard=True))
    await state.set_state(Statess.DefQuestion_set)


@admin_router.message(Statess.DefQuestion_set, F.text.casefold().contains("–¥–æ–±–∞–≤–∏—Ç—å"))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Statess.DefQuestion_add)


@admin_router.message(Statess.DefQuestion_add, F.text)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    question = message.text
    await message.delete()

    await state.update_data(question = question)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Statess.add_DefAnswer)


@admin_router.message(Statess.add_DefAnswer, F.text)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await state.update_data(answer = message.text)
    await message.delete()

    vokeb = await state.get_data()

    await orm_add_DefQuestion(session, vokeb)
    await state.set_state(Statess.DefQuestion_set)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!", reply_markup=add_del_back_menu.as_markup(
                            resize_keyboard=True))


@admin_router.message(Statess.DefQuestion_set, F.text.casefold().contains("—É–¥–∞–ª–∏—Ç—å"))  # –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    questions = await orm_get_DefQuestions(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î

    questionss = {question.question: f"delQuestion_{question.id}" for question in questions}

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_callback_btns_single_row(btns=questionss, sizes=(1,)))


@admin_router.callback_query(F.data.startswith("delQuestion_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –í–æ–ø—Ä–æ—Å–∞ –ø–æ id
async def inline_button_handler(callback: types.CallbackQuery, session: AsyncSession):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()
    question = callback.data.replace("delQuestion_", "")

    await orm_delete_DefQuestion(session, int(question))
    await callback.message.answer("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω!")


@admin_router.message(Statess.DefQuestion_set, F.text.casefold().contains("–Ω–∞–∑–∞–¥"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.set_state(Statess.Admin_kbd)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=admin_menu.as_markup(
                            resize_keyboard=True))