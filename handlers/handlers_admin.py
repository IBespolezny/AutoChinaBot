import asyncio
import os
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import Bot, types, F, Router
from aiogram.filters import Command, StateFilter, BaseFilter
from aiogram.fsm.context import FSMContext
from database.models import Cars
from database.orm_query import orm_add_DefQuestion, orm_add_admin, orm_add_car, orm_add_manager, orm_delete_DefQuestion, orm_delete_admin, orm_delete_car, orm_delete_manager, orm_get_DefQuestions, orm_get_admin, orm_get_admins, orm_get_cars, orm_get_managers
from filters.chat_filters import ChatTypeFilter
import config

from aiogram.utils.media_group import MediaGroupBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from functions.functions import get_admins_and_managers
from handlers.handlers_user import Statess
from keybords.inline_kbds import get_callback_btns, get_callback_btns_single_row, get_custom_callback_btns, orm_delete_car_buttons
from keybords.return_kbds import admin_menu, access_settings, admin_settings, manager_settings, auto_settings, add_del_back_menu
# from keybords.inline_kbds import get_callback_btns

bot = Bot(token=os.getenv("API_TOKEN"))


#################################   –§–∏–ª—å—Ç—Ä –≥—Ä—É–ø–ø   #################################

admin_router = Router()
admin_router.message.filter(ChatTypeFilter(['private'])) # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
# user_group_router.message.middleware(AlbumMiddleware())

#################################   –ö–æ–º–∞–Ω–¥—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞   #################################

@admin_router.message(StateFilter('*'), Command("admin"))
async def send_welcome(message: types.Message, state: FSMContext, session: AsyncSession):
    await message.delete()
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)

    if message.from_user.id in admins_ids:
        name = adminss.get(message.from_user.id)    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞ –ø–æ ID
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}", reply_markup=admin_menu.as_markup(
                            resize_keyboard=True))
        await state.set_state(Statess.Admin_kbd)





############################################ –∫–Ω–æ–ø–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º" ############################################

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await message.delete()
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞", reply_markup=access_settings.as_markup(
                            resize_keyboard=True))


##### –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await message.delete()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", reply_markup=admin_settings.as_markup(
                            resize_keyboard=True))
    await state.set_state(Statess.Admin_settings)
    

@admin_router.message(Statess.Admin_settings, F.text.casefold().contains("–¥–æ–±–∞–≤–∏—Ç—å"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¥–æ–±–∞–≤–∏—Ç—å"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await message.delete()
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)

    if message.from_user.id in admins_ids:
        delmes = await message.answer("–ö–∞–∫ –∑–æ–≤—É—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?", reply_markup=get_custom_callback_btns(
            btns={"–ù–∞–∑–∞–¥":"admin_"}, layout=[1]))
        await state.set_state(Statess.add_admin_name)
        

@admin_router.message(Statess.add_admin_name, F.text)  # –î–æ–±–∞–≤–ª—è–µ—Ç id –∞–¥–º–∏–Ω–∞
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(name = message.text)
    await message.delete()

    delmes = await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ id –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_custom_callback_btns(
            btns={"–ù–∞–∑–∞–¥":"admin_"}, layout=[1]))
    await state.set_state(Statess.add_admin_id)


@admin_router.message(Statess.add_admin_id, F.text)  # –î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –≤ –ë–î
async def cancel_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    adminId = int(message.text)
    await state.update_data(id = adminId)
    await message.delete()
    vokeb = await state.get_data()

    await orm_add_admin(session, vokeb)
    await state.set_state(Statess.Admin_settings)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=admin_settings.as_markup(
                            resize_keyboard=True))
    

@admin_router.message(Statess.Admin_settings, F.text.casefold().contains("—É–¥–∞–ª–∏—Ç—å"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "—É–¥–∞–ª–∏—Ç—å"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    admins = await orm_get_admins(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î

    adminss = {admin.name: f"{admin.id}" for admin in admins}

    admins = [int(admin) for admin in adminss.values()]
    
    if message.from_user.id in admins:
        await message.delete()
        admins = await orm_get_admins(session)

        adminess = {admin.name: f"delAdmin_{admin.id}" for admin in admins}
        adminess["–ù–∞–∑–∞–¥"] = "admin_"

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_callback_btns(btns=adminess))


@admin_router.callback_query(F.data.startswith("delAdmin_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ id
async def inline_button_handler(callback: types.CallbackQuery, session: AsyncSession):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()
    admin = callback.data.replace("delAdmin_", "")

    await orm_delete_admin(session, int(admin))
    delmes = await callback.message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—ë–Ω!")
    await asyncio.sleep(5)
    await bot.delete_message(callback.message.chat.id, delmes.message_id)



@admin_router.message(Statess.Admin_settings, F.text.casefold().contains("—Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "—É–¥–∞–ª–∏—Ç—å"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    admins = await orm_get_admins(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
    managers = await orm_get_managers(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ë–î

    adminss = {admin.name: f"{admin.id}" for admin in admins}
    managerss = {manager.name : f"{manager.id}" for manager in managers}

    admins = [int(admin) for admin in adminss.values()]
    managers = [int(manager) for manager in managerss.values()]
    await message.delete()
    
    if message.from_user.id in admins:
        admins = await orm_get_admins(session)

        adminess = {admin.name: f"admin_{admin.id}" for admin in admins}
        adminess["–ù–∞–∑–∞–¥"] = "admin_"

        await message.answer("–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:", reply_markup=get_callback_btns(btns=adminess))

@admin_router.message(Statess.Admin_settings, F.text.casefold().contains("–Ω–∞–∑–∞–¥"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–º–µ–Ω–µ–¥–∂–µ—Ä—ã"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await message.delete()
    await state.set_state(Statess.Admin_kbd)
    await message.answer("–ù–∞–∑–∞–¥üîô", reply_markup=access_settings.as_markup(
                            resize_keyboard=True))

##### –ú–µ–Ω–µ–¥–∂–µ—Ä—ã

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("–º–µ–Ω–µ–¥–∂–µ—Ä—ã"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–º–µ–Ω–µ–¥–∂–µ—Ä—ã"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await message.delete()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ú–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏", reply_markup=manager_settings.as_markup(
                            resize_keyboard=True))
    await state.set_state(Statess.Manager_settings)


@admin_router.message(Statess.Manager_settings, F.text.casefold().contains("—Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "—Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await message.delete()
    admins = await orm_get_admins(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
    managers = await orm_get_managers(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ë–î

    adminss = {admin.name: f"{admin.id}" for admin in admins}
    managerss = {manager.name : f"{manager.id}" for manager in managers}

    admins = [int(admin) for admin in adminss.values()]
    managers = [int(manager) for manager in managerss.values()]

    if (message.from_user.id in admins ) | (message.from_user.id in managers):
        managers = await orm_get_managers(session)

        managerss = {manager.name: f"manager_{manager.id}" for manager in managers}
        managerss["–ù–∞–∑–∞–¥"] = "manager_"

        await message.answer("–°–ø–∏—Å–æ–∫ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:", reply_markup=get_callback_btns(btns=managerss))


@admin_router.message(Statess.Manager_settings, F.text.casefold().contains("–¥–æ–±–∞–≤–∏—Ç—å"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¥–æ–±–∞–≤–∏—Ç—å"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await message.delete()
    admins = await orm_get_admins(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î

    adminss = {admin.name: f"{admin.id}" for admin in admins}

    admins = [int(admin) for admin in adminss.values()]

    if message.from_user.id in admins:
        delmes = await message.answer("–ö–∞–∫ –∑–æ–≤—É—Ç –ú–µ–Ω–µ–¥–∂–µ—Ä–∞?", reply_markup=get_custom_callback_btns(
            btns={"–ù–∞–∑–∞–¥":"manager_"}, layout=[1]))
        await state.set_state(Statess.add_manager_name)


@admin_router.message(Statess.add_manager_name, F.text)  # –î–æ–±–∞–≤–ª—è–µ—Ç id –º–µ–Ω–µ–¥–∂–µ—Ä–∞
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(name = message.text)
    await message.delete()

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ id –ú–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=get_custom_callback_btns(
            btns={"–ù–∞–∑–∞–¥":"manager_"}, layout=[1]))
    await state.set_state(Statess.add_manager_id)


@admin_router.message(Statess.add_manager_id, F.text)  # –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –ë–î
async def cancel_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    await state.update_data(id = int(message.text))
    await message.delete()
    vokeb = await state.get_data()

    await orm_add_manager(session, vokeb)
    await state.set_state(Statess.Manager_settings)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä!", reply_markup=manager_settings.as_markup(
                            resize_keyboard=True))


@admin_router.message(Statess.Manager_settings, F.text.casefold().contains("—É–¥–∞–ª–∏—Ç—å"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¥–æ–±–∞–≤–∏—Ç—å"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await message.delete()
    admins = await orm_get_admins(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î

    adminss = {admin.name: f"{admin.id}" for admin in admins}

    admins = [int(admin) for admin in adminss.values()]

    if message.from_user.id in admins:
        managers = await orm_get_managers(session)

        managerss = {manager.name: f"delManager_{manager.id}" for manager in managers}
        managerss["–ù–∞–∑–∞–¥"] = "manager_"

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_callback_btns(btns=managerss))


@admin_router.callback_query(F.data.startswith("delManager_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ id
async def inline_button_handler(callback: types.CallbackQuery, session: AsyncSession):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()
    manager = callback.data.replace("delManager_", "")

    await orm_delete_manager(session, int(manager))
    delmes = await callback.message.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª—ë–Ω!")



@admin_router.message(Statess.Manager_settings, F.text.casefold().contains("–Ω–∞–∑–∞–¥"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await message.delete()
    await state.set_state(Statess.Admin_kbd)
    await message.answer("–ù–∞–∑–∞–¥üîô", reply_markup=access_settings.as_markup(
                            resize_keyboard=True))


##### –ù–∞–∑–∞–¥ –∏ –ø—Ä–æ—á–µ–µ

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("–Ω–∞–∑–∞–¥"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô", reply_markup=admin_menu.as_markup(
                            resize_keyboard=True))

@admin_router.callback_query(F.data.startswith("manager_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
async def inline_button_handler(callback: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()
    await state.set_state(Statess.Manager_settings)


@admin_router.callback_query(F.data.startswith("admin_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def inline_button_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.delete()
    await state.set_state(Statess.Admin_settings)















############################################ –∫–Ω–æ–ø–∫–∞ "–ë–∞–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π" ############################################

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("–±–∞–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤", reply_markup=auto_settings.as_markup(
                            resize_keyboard=True))

    




########################### —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –±–∞–∑—ã ###########################

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("—É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"))
async def show_car_list(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    await message.delete()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –±–∞–∑—ã
    cars = await orm_get_cars(session)

    if not cars:
        await message.answer("üöó –í –±–∞–∑–µ –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ)
    btns = {f"{car_mark} {car_model} {int(car_cost)}": f"delete_car_{car_id}" for car_id, car_mark, car_model, car_cost in cars}
    btns["–ù–∞–∑–∞–¥"] = "delCars_"
    keyboard = get_custom_callback_btns(btns=btns, layout=[1] * len(btns))  # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 1 –∫–Ω–æ–ø–∫—É

    delete_mes = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.update_data(delete_mes=delete_mes.message_id)
    await state.set_state(Statess.delete_auto)



@admin_router.callback_query(F.data.startswith("delete_car_"))
async def delete_selected_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    car_id = int(callback.data.split("_")[2])  # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ callback_data

    # –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
    delete_success = await orm_delete_car(session, car_id)

    # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å #Ô∏è‚É£{car_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω" if delete_success else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."
    )

    await state.set_state(Statess.Admin_kbd)

@admin_router.callback_query(F.data.startswith("delCars_"))
async def delete_selected_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    await callback.message.delete()
    await state.set_state(Statess.Admin_kbd)






########################## –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å ############################


@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("–¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.delete()
    # delMEs = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", reply_markup=ReplyKeyboardRemove())
    # await bot.delete_message(message.chat.id, delMEs.message_id)

    usemes = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É:",
        reply_markup=get_callback_btns(btns={
            'üîô –ù–∞–∑–∞–¥': f'back_to_main_new',
        }),
        )
    mes = usemes.message_id
    await state.update_data(mes = mes)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(Statess.Model)


@admin_router.message(Statess.Model, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(mark = message.text)
    await message.delete()
    vokeb = await state.get_data()
    mes = int(vokeb.get("mes"))

    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_mark_{mes}',
            }),)
    await state.set_state(Statess.package)


@admin_router.message(Statess.package, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(model = message.text)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_model_',
            }),)
    await state.set_state(Statess.body)


@admin_router.message(Statess.body, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(package = message.text)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫—É–∑–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_package_',
            }),)
    await state.set_state(Statess.Year)


@admin_router.message(Statess.Year, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(body = message.text)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_body_{mes}',
            }),)
    await state.set_state(Statess.cost)


@admin_router.message(Statess.cost, F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    year = int(message.text)
    await state.update_data(year = year)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É:", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': f'back_to_year_{mes}',
            }),)
    await state.set_state(Statess.rools)




@admin_router.message(Statess.rools, F.text)
async def choos_engine_type(message: types.Message, state: FSMContext, session: AsyncSession):
    await message.delete()
    cost = float(message.text)
    await state.update_data(cost = cost)
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–≤–æ–¥:", 
        message.chat.id, 
        mes, 
        reply_markup=get_custom_callback_btns(btns={
                '–ü–µ—Ä–µ–¥–Ω–∏–π': f'–ø–µ—Ä–µ–¥–Ω–∏–π',
                '–ó–∞–¥–Ω–∏–π': f'–∑–∞–¥–Ω–∏–π',
                '–ü–æ–ª–Ω—ã–π': f'–ø–æ–ª–Ω—ã–π',
                'üîô –ù–∞–∑–∞–¥': f'back_to_cost_',
            }, layout=[3,1]
            ),)
    await state.set_state(None)


@admin_router.callback_query(F.data.startswith("–ø–µ—Ä–µ–¥–Ω–∏–π"))
@admin_router.callback_query(F.data.startswith("–∑–∞–¥–Ω–∏–π"))
@admin_router.callback_query(F.data.startswith("–ø–æ–ª–Ω—ã–π"))
async def choos_engine_type(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):

    await state.update_data(weel_drive = callback.data)
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–ö–∞–∫ –æ—Ç–º–µ—Ç–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å:", 
        callback.message.chat.id, 
        mes, 
        reply_markup=get_custom_callback_btns(btns={
                '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π üî•': '–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ',
                '–í –ø—É—Ç–∏ üó∫Ô∏è': '–≤ –ø—É—Ç–∏',
                '–í –Ω–∞–ª–∏—á–∏–∏ üèÅ': '–≤ –Ω–∞–ª–∏—á–∏–∏',
                '‚ùå': '–Ω–µ—Ç',
                'üîô –ù–∞–∑–∞–¥': 'back_to_weel_drive',
            }, layout=[2,2,1]
            ),)





@admin_router.callback_query(F.data.startswith("–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ"))
@admin_router.callback_query(F.data.startswith("–≤ –ø—É—Ç–∏"))
@admin_router.callback_query(F.data.startswith("–≤ –Ω–∞–ª–∏—á–∏–∏"))
@admin_router.callback_query(F.data.startswith("–Ω–µ—Ç"))
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    
    await state.update_data(flag = callback.data)
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:", 
        callback.message.chat.id, 
        mes, 
        reply_markup=get_custom_callback_btns(btns={
                '–î–í–°': f'–î–í–°',
                '–≠–ª–µ–∫—Ç—Ä–æ': f'—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π',
                '–ì–∏–±—Ä–∏–¥': f'–≥–∏–±—Ä–∏–¥',
                'üîô –ù–∞–∑–∞–¥': f'back_to_flag',
            }, layout=[3,1]
            ),)


@admin_router.callback_query(F.data.startswith("–î–í–°"))
@admin_router.callback_query(F.data.startswith("—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"))
@admin_router.callback_query(F.data.startswith("–≥–∏–±—Ä–∏–¥"))
async def choos_engine_type(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    vokeb = await state.get_data()
    mes = vokeb.get("mes")
    await state.update_data(engine_type = callback.data)

    if callback.data == "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π":
        await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–∞–≤—Ç–æ–º–æ–±–∏–ª—è:", 
        callback.message.chat.id, 
        mes, 
        reply_markup=get_custom_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': 'back_to_engine_type',
            }, layout=[1]
            ),)
        
        await state.update_data(electrocar="yes")
        await state.set_state(Statess.power)
        

    if callback.data != "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π":
        await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:", 
        callback.message.chat.id, 
        mes, 
        reply_markup=get_custom_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': 'back_to_engine_type',
            }, layout=[1]
            ),)
        
        await state.update_data(electrocar="no")
        await state.set_state(Statess.engine_volume)


@admin_router.message(Statess.power, F.text)
async def choos_engine_type(message: types.Message, state: FSMContext, session: AsyncSession):
    power = float(message.text)
    await state.update_data(power = power)
    await state.update_data(engine_volume = None)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ —ë–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏:", 
        message.chat.id, 
        mes, 
        reply_markup=get_custom_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': 'back_to_power',
            }, layout=[1]
            ),)
        
    await state.set_state(Statess.power_bank)    


@admin_router.message(Statess.power_bank, F.text)
async def choos_engine_type(message: types.Message, state: FSMContext, session: AsyncSession):
    power_bank = float(message.text)
    await state.update_data(power_bank = power_bank)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø–∞—Å —Ö–æ–¥–∞:", 
        message.chat.id, 
        mes, 
        reply_markup=get_custom_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': 'back_to_bank_power',
            }, layout=[1]
            ),)
        
    await state.set_state(Statess.power_reserve)  


@admin_router.message(Statess.power_reserve, F.text)
async def choos_engine_type(message: types.Message, state: FSMContext, session: AsyncSession):
    power_reserve = float(message.text)
    await state.update_data(power_reserve = power_reserve)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥:", 
        message.chat.id, 
        mes, 
        reply_markup=get_custom_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': 'back_to_reserv_power',
            }, layout=[1]
            ),)
        
    await state.set_state(Statess.route)  


@admin_router.message(Statess.engine_volume, F.text)
async def choos_engine_type(message: types.Message, state: FSMContext, session: AsyncSession):
    engine_volume = float(message.text)
    await state.update_data(engine_volume = engine_volume)
    await state.update_data(power_bank = None)
    await state.update_data(power_reserve = None)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –≤ –õ–æ—à–∞–¥–∏–Ω–Ω—ã—Ö —Å–∏–ª–∞—Ö:", 
        message.chat.id, 
        mes, 
        reply_markup=get_custom_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': 'back_to_type_of_engine',
            }, layout=[1]
            ),)
        
    await state.set_state(Statess.power_engin) 

@admin_router.message(Statess.power_engin, F.text)
async def choos_engine_type(message: types.Message, state: FSMContext, session: AsyncSession):
    power = float(message.text)
    await state.update_data(power = power)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥:", 
        message.chat.id, 
        mes, 
        reply_markup=get_custom_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': 'back_to_engine_volume',
            }, layout=[1]
            ),)
        
    await state.set_state(Statess.route) 


@admin_router.message(Statess.route, F.text)
async def choos_engine_type(message: types.Message, state: FSMContext, session: AsyncSession):
    route = float(message.text)
    await state.update_data(route = route)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    await bot.edit_message_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", 
        message.chat.id, 
        mes, 
        reply_markup=get_custom_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': 'back_to_route',
            }, layout=[1]
            ),)
        
    await state.set_state(Statess.photo) 



@admin_router.message(Statess.photo, F.photo)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
async def cancel_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    photo = message.photo[-1].file_id
    await state.update_data(photo = photo)
    await message.delete()
    vokeb = await state.get_data()
    mes = vokeb.get("mes")

    vokeb = await state.get_data()
    await orm_add_car(session, vokeb)
    await bot.edit_message_text(
        f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!", 
        message.chat.id, 
        mes, 
        reply_markup=get_callback_btns(btns={
                '–û–ö ‚úÖ': f'back_to_main_new_{mes}',
            }),)









########################## –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ ###########################

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"

@admin_router.callback_query(F.data.startswith("back_to_main_new"))
async def back_to_main(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.delete_message(
        callback.message.chat.id,
        mesID,
    )
    await state.set_state(Statess.Admin_kbd)

@admin_router.callback_query(F.data.startswith("back_to_mark_"))
async def back_to_mark(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É:",
        callback.message.chat.id,
        mesID,
        reply_markup=get_callback_btns(btns={'üîô –ù–∞–∑–∞–¥': 'back_to_main_new'})
    )
    await state.set_state(Statess.Model)

@admin_router.callback_query(F.data.startswith("back_to_model_"))
async def back_to_model(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        callback.message.chat.id,
        mesID,
        reply_markup=get_callback_btns(btns={'üîô –ù–∞–∑–∞–¥': 'back_to_mark_'})
    )
    await state.set_state(Statess.package)

@admin_router.callback_query(F.data.startswith("back_to_package_"))
async def back_to_package(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é:",
        callback.message.chat.id,
        mesID,
        reply_markup=get_callback_btns(btns={'üîô –ù–∞–∑–∞–¥': 'back_to_model_'})
    )
    await state.set_state(Statess.body)

@admin_router.callback_query(F.data.startswith("back_to_body_"))
async def back_to_body(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫—É–∑–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        callback.message.chat.id,
        mesID,
        reply_markup=get_callback_btns(btns={'üîô –ù–∞–∑–∞–¥': 'back_to_package_'})
    )
    await state.set_state(Statess.Year)

@admin_router.callback_query(F.data.startswith("back_to_year_"))
async def back_to_year(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:",
        callback.message.chat.id,
        mesID,
        reply_markup=get_callback_btns(btns={'üîô –ù–∞–∑–∞–¥': 'back_to_body_'})
    )
    await state.set_state(Statess.cost)


@admin_router.callback_query(F.data.startswith("back_to_type_of_engine"))
async def back_to_year(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:", 
        callback.message.chat.id, 
        mesID, 
        reply_markup=get_custom_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': 'back_to_engine_type',
            }, layout=[1]
            ),)
    await state.set_state(Statess.engine_volume)


@admin_router.callback_query(F.data.startswith("back_to_cost_"))
async def back_to_cost(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É:",
        callback.message.chat.id,
        mesID,
        reply_markup=get_callback_btns(btns={'üîô –ù–∞–∑–∞–¥': 'back_to_year_'})
    )
    await state.set_state(Statess.rools)

@admin_router.callback_query(F.data.startswith("back_to_engine_type"))
async def back_to_engine_type(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:",
        callback.message.chat.id,
        mesID,
        reply_markup=get_custom_callback_btns(btns={
            '–î–í–°': '–î–í–°',
            '–≠–ª–µ–∫—Ç—Ä–æ': '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π',
            '–ì–∏–±—Ä–∏–¥': '–≥–∏–±—Ä–∏–¥',
            'üîô –ù–∞–∑–∞–¥': 'back_to_cost_'
        }, layout=[3,1])
    )


@admin_router.callback_query(F.data.startswith("back_to_route"))
async def back_to_route(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥:",
        callback.message.chat.id,
        mesID,
        reply_markup=get_custom_callback_btns(btns={'üîô –ù–∞–∑–∞–¥': 'back_to_power_bank'}, layout=[1])
    )
    await state.set_state(Statess.route)

@admin_router.callback_query(F.data.startswith("back_to_bank_power"))
async def back_to_power_bank(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ —ë–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏:",
        callback.message.chat.id,
        mesID,
        reply_markup=get_custom_callback_btns(btns={'üîô –ù–∞–∑–∞–¥': 'back_to_power'}, layout=[1])
    )
    await state.set_state(Statess.power_bank)

@admin_router.callback_query(F.data.startswith("back_to_power"))
async def back_to_power(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        callback.message.chat.id,
        mesID,
        reply_markup=get_custom_callback_btns(btns={'üîô –ù–∞–∑–∞–¥': 'back_to_engine_type'}, layout=[1])
    )
    await state.set_state(Statess.power)


@admin_router.callback_query(F.data.startswith("back_to_reserv_power"))
async def back_to_power(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø–∞—Å —Ö–æ–¥–∞:", 
        callback.message.chat.id, 
        mesID, 
        reply_markup=get_custom_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': 'back_to_bank_power',
            }, layout=[1]
            ),)
        
    await state.set_state(Statess.power_reserve) 




@admin_router.callback_query(F.data.startswith("back_to_weel_drive"))
async def back_to_power(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–≤–æ–¥:", 
        callback.message.chat.id, 
        mesID, 
        reply_markup=get_custom_callback_btns(btns={
                '–ü–µ—Ä–µ–¥–Ω–∏–π': f'–ø–µ—Ä–µ–¥–Ω–∏–π',
                '–ó–∞–¥–Ω–∏–π': f'–∑–∞–¥–Ω–∏–π',
                '–ü–æ–ª–Ω—ã–π': f'–ø–æ–ª–Ω—ã–π',
                'üîô –ù–∞–∑–∞–¥': f'back_to_engine_type',
            }, layout=[3,1]
            ),)
    await state.set_state(None)


@admin_router.callback_query(F.data.startswith("back_to_flag"))
async def back_to_power(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id
    await bot.edit_message_text(
        "–ö–∞–∫ –æ—Ç–º–µ—Ç–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å:", 
        callback.message.chat.id, 
        mesID, 
        reply_markup=get_custom_callback_btns(btns={
                '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π üî•': '–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ',
                '–í –ø—É—Ç–∏ üó∫Ô∏è': '–≤ –ø—É—Ç–∏',
                '–í –Ω–∞–ª–∏—á–∏–∏ üèÅ': '–≤ –Ω–∞–ª–∏—á–∏–∏',
                '‚ùå': '–Ω–µ—Ç',
                'üîô –ù–∞–∑–∞–¥': 'back_to_weel_drive',
            }, layout=[2,2,1]
            ),)


@admin_router.callback_query(F.data.startswith("back_to_engine_volume"))
async def back_to_power(callback: types.CallbackQuery, state: FSMContext) -> None:
    mesID = callback.message.message_id

    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –≤ –õ–æ—à–∞–¥–∏–Ω–Ω—ã—Ö —Å–∏–ª–∞—Ö:", 
        callback.message.chat.id, 
        mesID, 
        reply_markup=get_custom_callback_btns(btns={
                'üîô –ù–∞–∑–∞–¥': 'back_to_type_of_engine',
            }, layout=[1]
            ),)
        
    await state.set_state(Statess.power_engin) 






############################################ –∫–Ω–æ–ø–∫–∞ "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã" ############################################

@admin_router.message(Statess.Admin_kbd, F.text.casefold().contains("—á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "—á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=add_del_back_menu.as_markup(
                            resize_keyboard=True))
    await state.set_state(Statess.DefQuestion_set)


@admin_router.message(Statess.DefQuestion_set, F.text.casefold().contains("–¥–æ–±–∞–≤–∏—Ç—å"))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Statess.DefQuestion_add)


@admin_router.message(Statess.DefQuestion_add, F.text)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    question = message.text
    await message.delete()

    await state.update_data(question = question)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Statess.add_DefAnswer)


@admin_router.message(Statess.add_DefAnswer, F.text)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    await state.update_data(answer = message.text)
    await message.delete()

    vokeb = await state.get_data()

    await orm_add_DefQuestion(session, vokeb)
    await state.set_state(Statess.DefQuestion_set)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!", reply_markup=add_del_back_menu.as_markup(
                            resize_keyboard=True))


@admin_router.message(Statess.DefQuestion_set, F.text.casefold().contains("—É–¥–∞–ª–∏—Ç—å"))  # –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def cancel_handler(message: types.Message, state: FSMContext, session:AsyncSession) -> None:
    questions = await orm_get_DefQuestions(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î

    questionss = {question.question: f"delQuestion_{question.id}" for question in questions}
    questionss["–ù–∞–∑–∞–¥"] = "questions_"

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_callback_btns_single_row(btns=questionss, sizes=(1,)))


@admin_router.callback_query(F.data.startswith("delQuestion_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –í–æ–ø—Ä–æ—Å–∞ –ø–æ id
async def inline_button_handler(callback: types.CallbackQuery, session: AsyncSession):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()
    question = callback.data.replace("delQuestion_", "")

    await orm_delete_DefQuestion(session, int(question))
    await callback.message.answer("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω!")


@admin_router.message(Statess.DefQuestion_set, F.text.casefold().contains("–Ω–∞–∑–∞–¥"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.set_state(Statess.Admin_kbd)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=admin_menu.as_markup(
                            resize_keyboard=True))
    
@admin_router.callback_query(F.data.startswith("questions_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –í–æ–ø—Ä–æ—Å–∞ –ø–æ id
async def inline_button_handler(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.message.delete()
    await state.set_state(Statess.DefQuestion_set)