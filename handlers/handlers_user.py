import asyncio
import logging
import os
import re
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, StateFilter, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, Message, InlineKeyboardMarkup, InlineKeyboardButton
import requests

import config
from database.orm_query import orm_add_dialog, orm_end_dialog, orm_get_DefQuestion, orm_get_DefQuestions, orm_get_admins, orm_get_calculate_column_value, orm_get_car, orm_get_car_by_flag, orm_get_cars_by_cost, orm_get_dialog_by_client_id, orm_get_dialog_by_client_message, orm_get_electrocars, orm_get_managers, orm_get_managers_group, orm_save_client_message, orm_update_manager_in_dialog
from database.models import Dialog
from filters.chat_filters import ChatTypeFilter

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

# from keybords.inline_kbds import get_callback_btns
from functions.functions import format_number, get_admins_and_managers, int_format, is_valid_phone_number
from keybords.inline_kbds import get_callback_btns, get_callback_btns_single_row, get_custom_callback_btns
from keybords.return_kbds import main_menu, hot_menu, question_menu, region_menu, engine_menu, old_or_new_menu

#######################################  –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π  ###################################################

messages = {}

class Statess(StatesGroup):
    Order = State()                         # –°–æ—Å—Ç–æ—è–Ω–∏–µ –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    add_admin_name = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞
    add_admin_id = State()                  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –∞–¥–º–∏–Ω–∞
    help_buy_auto = State()                  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –∞–¥–º–∏–Ω–∞
    Admin_kbd = State()                     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º
    Admin_settings = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    enter_cost = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    Manager_settings = State()              # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ú–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
    add_manager_name = State()              # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    add_manager_id = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    Cars_by_cost_set = State()                  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∞—à–∏–Ω –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    Popular_cars_set = State()                  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∞—à–∏–Ω –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    Electrocars_set = State()                   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–æ–≤
    Cars_quee_set = State()                     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –ø—É—Ç–∏
    –°ars_in_set = State()                       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –Ω–∞–ª–∏—á–∏–∏
    DefQuestion_set = State()                   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    add_DefAnswer = State()                     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    DefQuestion_add = State()                   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    delete_auto = State()                   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    ask_question = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    consultation = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞

    choos_region = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    enter_engine_type = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    enter_phone_number = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    Write_sum = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞

    Mark = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ
    Model = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ
    Year = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    engine = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    engine_volume = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    route = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    rools = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    power = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    power_engin = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    photo = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    flag = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    electrocar = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    cost = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    power_bank = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    package = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    body = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    power_reserve = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ


#######################################  –§–∏–ª—å—Ç—Ä –≥—Ä—É–ø–ø   #########################################

user_router_manager = Router()
user_router_manager.message.filter(ChatTypeFilter(['private']))
bot = Bot(token=os.getenv("API_TOKEN"))



#######################################     –°—Ç–∞—Ç–∏—á–Ω—ã–µ –ö–æ–º–∞–Ω–¥—ã    ###########################################

@user_router_manager.message(StateFilter('*'), Command("start"))            # –û—á–∏—â–∞–µ—Ç –ú–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def start_handler(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(config.START_MESSAGE, reply_markup=main_menu.as_markup(
                            resize_keyboard=True), parse_mode='HTML')


@user_router_manager.message(F.text.casefold().contains("–Ω–∞–∑–∞–¥"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô", reply_markup=main_menu.as_markup(
                            resize_keyboard=True))









#######################################     –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã    ###########################################

@user_router_manager.message(F.text.casefold().contains("–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã"))   # –õ–æ–≥–∏–∫–∞ –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞‚ùî", reply_markup=question_menu.as_markup(
                            resize_keyboard=True))
    






#######################################     –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã    ###########################################


@user_router_manager.message(F.text.casefold().contains("—á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"))  # –õ–æ–≥–∏–∫–∞ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
async def hot_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    def_questions = await orm_get_DefQuestions(session)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    question_btns = {question.question: f"question_{question.id}" for question in def_questions}
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    questionMessage = await message.answer(
        "–°–ø–∏—Å–æ–∫ –ß–∞—Å—Ç—ã—Ö –í–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=get_callback_btns_single_row(btns=question_btns, sizes=(1,))
    )
    await state.update_data(questionMessage = questionMessage.message_id)



@user_router_manager.callback_query(F.data.startswith("question_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
async def inline_button_handler(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    answerID = callback.data.removeprefix("question_")
    answer = await orm_get_DefQuestion(session, int(answerID))
    
    def_questions = await orm_get_DefQuestions(session)                                             # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    
    question_btns = {question.question: f"question_{question.id}" for question in def_questions}    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    vokeb = await state.get_data()
    questionMessage = int(vokeb.get("questionMessage"))
    await bot.edit_message_text(answer.answer, callback.message.chat.id, questionMessage,           # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
                                reply_markup=get_callback_btns_single_row(btns=question_btns, sizes=(1,))) 






#######################################     –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å    ###########################################

@user_router_manager.message(F.text.casefold().contains("–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))   # –õ–æ–≥–∏–∫–∞ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Statess.ask_question)



@user_router_manager.message(Statess.ask_question, F.text)   # –õ–æ–≥–∏–∫–∞ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
async def hot_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    mesID = message.message_id  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    delmes = await message.answer("–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
    await bot.send_message(chat_id=await orm_get_managers_group(session), text = "‚ùì–í–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n\n‚¨áÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞‚¨áÔ∏è")
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    forwarded_message = await bot.forward_message(
        chat_id=await orm_get_managers_group(session), 
        from_chat_id=message.chat.id, 
        message_id=mesID
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await orm_add_dialog(
        session, 
        client_id=message.from_user.id, 
        client_message_id=forwarded_message.message_id  # ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )
    await bot.delete_message(message.chat.id, delmes.message_id)
    await message.answer(
        f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n<b>{message.text}</b>\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º‚úÖ\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Çüïú\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–∫–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –ø–æ–∫–∞ –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", 
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"end_{mesID}")]
            ]
        ),
        parse_mode='HTML'
    )
    await state.clear()



@user_router_manager.callback_query(StateFilter('*'), F.data.startswith("end_"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
async def start_handler(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    await callback.message.delete()
    user_id = callback.message.chat.id
    user_name = callback.from_user.full_name

    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ client_message_id
    dialog = await orm_get_dialog_by_client_id(session, user_id)

    if dialog and dialog.manager_id:
        await bot.send_message(int(dialog.manager_id), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.")


    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    await orm_end_dialog(session, client_id=user_id)

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer(
        "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!",
        reply_markup=main_menu.as_markup(resize_keyboard=True)
    )



@user_router_manager.message(F.text == "/end", F.reply_to_message)  # –ö–æ–º–∞–Ω–¥–∞ /end –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def end_dialog_with_reply(message: types.Message, session: AsyncSession, bot: Bot) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    replied_message = message.reply_to_message

    if not replied_message:
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    dialog = await orm_get_dialog_by_client_message(session, client_message_id=replied_message.message_id)

    if not dialog:
        await message.reply("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    client_id = dialog.client_id

    if not client_id:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    try:
        await bot.send_message(
            chat_id=client_id,
            text="–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
            reply_markup=main_menu.as_markup(resize_keyboard=True)
        )
    except Exception:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await orm_end_dialog(session, client_id=client_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await message.reply("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")



@user_router_manager.message(StateFilter('*'),  F.reply_to_message)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
async def caught_query(message: types.Message, state: FSMContext, session: AsyncSession):
    managers = await orm_get_managers(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ë–î
    managerss = {manager.name : f"{manager.id}" for manager in managers}
    managers = [int(manager) for manager in managerss.values()]

    if message.from_user.id not in managers:
        await message.delete()
        await message.answer("‚ùå–ù–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç", reply_markup=main_menu.as_markup(
                            resize_keyboard=True))
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
    replied_message_id = message.reply_to_message.message_id
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    dialog = await orm_get_dialog_by_client_message(session, client_message_id=replied_message_id)

    if dialog:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
        sent_message = await bot.send_message(chat_id=dialog.client_id, text=f"<b>{message.from_user.first_name}</b>:\n{message.text}", parse_mode='HTML')

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –≤ –¥–∏–∞–ª–æ–≥–µ
        await orm_update_manager_in_dialog(
            session=session,
            client_message_id=dialog.client_message_id,
            manager_id=message.from_user.id,
            manager_message_id=sent_message.message_id
        )
        

    else:
        await message.answer("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=main_menu.as_markup(
                            resize_keyboard=True))


@user_router_manager.message()  # –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
async def hot_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    query = (
        select(Dialog)
        .where(Dialog.client_id == message.chat.id, Dialog.is_active == True)
    )
    result = await session.execute(query)
    dialog = result.scalar()

    if dialog and dialog.manager_id:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        forwarded_message = await bot.forward_message(
            chat_id=dialog.manager_id,
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        await orm_save_client_message(
            session=session,
            client_id=message.chat.id,
            manager_id=dialog.manager_id,
            client_message_id=forwarded_message.message_id,
            manager_message_id=message.message_id
        )

    else:
        await message.reply("–î–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ñ–µ–ª–∞–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?", reply_markup=question_menu.as_markup(
                            resize_keyboard=True))
