import asyncio
import re
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, StateFilter, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, Message, InlineKeyboardMarkup, InlineKeyboardButton
import requests

import config
from database.orm_query import orm_add_dialog, orm_end_dialog, orm_get_DefQuestion, orm_get_DefQuestions, orm_get_admins, orm_get_car, orm_get_car_by_flag, orm_get_dialog_by_client_message, orm_get_electrocars, orm_get_managers, orm_save_client_message, orm_update_manager_in_dialog
from database.models import Dialog
from filters.chat_filters import ChatTypeFilter

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

# from keybords.inline_kbds import get_callback_btns
from keybords.inline_kbds import get_callback_btns, get_callback_btns_single_row
from keybords.return_kbds import main_menu, hot_menu, question_menu

#######################################  –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π  ###################################################

messages = {}

class Statess(StatesGroup):
    Order = State()                         # –°–æ—Å—Ç–æ—è–Ω–∏–µ –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    add_admin_name = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞
    add_admin_id = State()                  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –∞–¥–º–∏–Ω–∞
    Admin_kbd = State()                     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º
    Admin_settings = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    Manager_settings = State()              # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ú–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
    add_manager_name = State()              # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    add_manager_id = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    Cars_by_cost_set = State()                  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∞—à–∏–Ω –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    Popular_cars_set = State()                  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∞—à–∏–Ω –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    Electrocars_set = State()                   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–æ–≤
    Cars_quee_set = State()                     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –ø—É—Ç–∏
    –°ars_in_set = State()                       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –Ω–∞–ª–∏—á–∏–∏
    DefQuestion_set = State()                   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    add_DefAnswer = State()                     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    DefQuestion_add = State()                   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    ask_question = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    consultation = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞

    Mark = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ
    Model = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ
    Year = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    engine = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    engine_volume = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    route = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    engine_type = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    power = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    photo = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    flag = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    electrocar = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    cost = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    power_bank = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    package = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    body = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ


#######################################  –§–∏–ª—å—Ç—Ä –≥—Ä—É–ø–ø   #########################################

user_router_manager = Router()
user_router_manager.message.filter(ChatTypeFilter(['private']))
bot = Bot(token=config.API_TOKEN)

# class MainManagerFilter(BaseFilter):
#     async def __call__(self, message: Message) -> bool:
#         return message.chat.id == config.MANAGERS_GROUP_ID

#######################################     –°—Ç–∞—Ç–∏—á–Ω—ã–µ –ö–æ–º–∞–Ω–¥—ã    ###########################################

@user_router_manager.message(StateFilter('*'), Command("start"))            # –û—á–∏—â–∞–µ—Ç –ú–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def start_handler(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(config.START_MESSAGE, reply_markup=main_menu.as_markup(
                            resize_keyboard=True), parse_mode='HTML')




#######################################     –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å    ###########################################

@user_router_manager.message(F.text.casefold().contains("–ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"))   # –õ–æ–≥–∏–∫–∞ –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—éüöó\n–ß—Ç–æ–±—ã –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º –∞–≤—Ç–æ", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Statess.consultation)


@user_router_manager.message(Statess.consultation, F.text)   # –õ–æ–≥–∏–∫–∞ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
async def hot_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    mesID = message.message_id  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    delmes = await message.answer("–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")

    await bot.send_message(chat_id=config.MANAGERS_GROUP_ID, text = "‚ùì–í–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞")
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    forwarded_message = await bot.forward_message(
        chat_id=config.MANAGERS_GROUP_ID, 
        from_chat_id=message.chat.id, 
        message_id=mesID
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await orm_add_dialog(
        session, 
        client_id=message.from_user.id, 
        client_message_id=forwarded_message.message_id  # ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )
    await bot.delete_message(message.chat.id, delmes.message_id)
    await message.answer(
        f"–í–∞—à –∑–∞–∫–∞–∑:\n<b>{message.text}</b>\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º‚úÖ\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Çüïú\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–∫–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –ø–æ–∫–∞ –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", 
        reply_markup=get_callback_btns(btns={
                '–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥': f'end_{mesID}',
            }),
        parse_mode='HTML'
    )
    await state.clear()



#######################################     –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å    ###########################################

@user_router_manager.message(F.text.casefold().contains("—Ä–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"))   # –õ–æ–≥–∏–∫–∞ –†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("*–õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è*")







#######################################     –ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è    ###########################################

@user_router_manager.message(F.text.casefold().contains("–≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüî•"))   # –õ–æ–≥–∏–∫–∞ –ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("üöó–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è", reply_markup=hot_menu.as_markup(
                            resize_keyboard=True))
    

    
@user_router_manager.message(F.text.casefold().contains("–ø–æ–¥–±–æ—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"))
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("*–õ–æ–≥–∏–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π*")


@user_router_manager.message(F.text.casefold().contains("–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"))
async def hot_handler(message: types.Message, session: AsyncSession, state: FSMContext) -> None:
    await state.update_data(order_mes = message.message_id)
    await state.update_data(order_chat = message.chat.id)

    cars = await orm_get_car_by_flag(session, "–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ")  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω —Å —Ñ–ª–∞–≥–æ–º "–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ"
    if cars:
        for car in cars:
            car_info = (
                f"üöó **–ú–∞—Ä–∫–∞:** {car.mark}\n"
                f"üìç **–ú–æ–¥–µ–ª—å:** {car.model}\n"
                f"üìÖ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {car.year}\n"
                f"‚öôÔ∏è **–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:** {car.engine_volume} –ª\n"
                f"üë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:** {car.places}\n"
                f"üèÅ **–ü—Ä–æ–±–µ–≥:** {car.route} –∫–º\n"
                f"‚õΩ **–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:** {car.engine_type}\n"
                f"üîß **–¢–∏–ø –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á:** {car.box}\n"
                f"üîã **–≠–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä:** {'–î–∞' if car.electrocar == '–î–∞' else '–ù–µ—Ç'}\n"
                f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {car.cost:,} $.\n"
            )
            car_id = car.car_id
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            await message.answer_photo(
                photo=car.foto, 
                caption=car_info, 
                parse_mode="Markdown", 
                reply_markup=get_callback_btns(btns={
                '‚¨ÖÔ∏è': f'left_{car_id}',
                '‚û°Ô∏è': f'right_{car_id}',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            }),)
    else:
        await message.answer("üö´ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    

@user_router_manager.message(F.text.casefold().contains("—ç–ª–µ–∫—Ç—Ä–æ–∞–≤—Ç–æ–º–æ–±–∏–ª–∏"))
async def hot_handler(message: types.Message, session: AsyncSession, state: FSMContext) -> None:
    await state.update_data(order_mes = message.message_id)
    await state.update_data(order_chat = message.chat.id)

    cars = await orm_get_electrocars(session)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω —Å —Ñ–ª–∞–≥–æ–º "–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ"
    if cars:
        for car in cars:
            car_info = (
                f"üöó **–ú–∞—Ä–∫–∞:** {car.mark}\n"
                f"üìç **–ú–æ–¥–µ–ª—å:** {car.model}\n"
                f"üìÖ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {car.year}\n"
                f"üîã **–ï–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏:** {car.engine_volume} –ª\n"
                f"üë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:** {car.places}\n"
                f"üèÅ **–ü—Ä–æ–±–µ–≥:** {car.route} –∫–º\n"
                f"‚õΩ **–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:** {car.engine_type}\n"
                f"üîß **–¢–∏–ø –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á:** {car.box}\n"
                f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {car.cost:,} $\n"
            )
            car_id = car.car_id
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            await message.answer_photo(
                photo=car.foto, 
                caption=car_info, 
                parse_mode="Markdown", 
                reply_markup=get_callback_btns(btns={
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ ': f'get_{car_id}',
            }),)

    else:
        await message.answer("üö´ –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


@user_router_manager.message(F.text.casefold().contains("–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –ø—É—Ç–∏"))
async def hot_handler(message: types.Message, session: AsyncSession, state: FSMContext) -> None:
    await state.update_data(order_mes = message.message_id)
    await state.update_data(order_chat = message.chat.id)

    cars = await orm_get_car_by_flag(session, "–í –ø—É—Ç–∏")  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω —Å —Ñ–ª–∞–≥–æ–º "–í –ø—É—Ç–∏"
    if cars:
        for car in cars:
            car_info = (
                f"üöó **–ú–∞—Ä–∫–∞:** {car.mark}\n"
                f"üìç **–ú–æ–¥–µ–ª—å:** {car.model}\n"
                f"üìÖ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {car.year}\n"
                f"üîã **–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:** {car.engine_volume} –ª\n"
                f"üë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:** {car.places}\n"
                f"üèÅ **–ü—Ä–æ–±–µ–≥:** {car.route} –∫–º\n"
                f"‚õΩ **–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:** {car.engine_type}\n"
                f"üîß **–¢–∏–ø –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á:** {car.box}\n"
                f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {car.cost:,} $\n"
            )
            car_id = car.car_id
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            await message.answer_photo(
                photo=car.foto, 
                caption=car_info, 
                parse_mode="Markdown", 
                reply_markup=get_callback_btns(btns={
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ ': f'get_{car_id}',
            }),)

    else:
        await message.answer("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –ø—É—Ç–∏ –Ω–µ—Ç")


@user_router_manager.message(F.text.casefold().contains("–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏"))
async def hot_handler(message: types.Message, session: AsyncSession, state: FSMContext) -> None:
    await state.update_data(order_mes = message.message_id)
    await state.update_data(order_chat = message.chat.id)

    cars = await orm_get_car_by_flag(session, "–í –Ω–∞–ª–∏—á–∏–∏")  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω —Å —Ñ–ª–∞–≥–æ–º "–í –Ω–∞–ª–∏—á–∏–∏"
    if cars:
        for car in cars:
            car_info = (
                f"üöó **–ú–∞—Ä–∫–∞:** {car.mark}\n"
                f"üìç **–ú–æ–¥–µ–ª—å:** {car.model}\n"
                f"üìÖ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {car.year}\n"
                f"üîã **–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:** {car.engine_volume} –ª\n"
                f"üë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:** {car.places}\n"
                f"üèÅ **–ü—Ä–æ–±–µ–≥:** {car.route} –∫–º\n"
                f"‚õΩ **–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:** {car.engine_type}\n"
                f"üîß **–¢–∏–ø –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á:** {car.box}\n"
                f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {car.cost:,} $\n"
            )
            car_id = car.car_id
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            await message.answer_photo(
                photo=car.foto, 
                caption=car_info, 
                parse_mode="Markdown", 
                reply_markup=get_callback_btns(btns={
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ ': f'get_{car_id}',
                
            }),)

    else:
        await message.answer("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –ø—É—Ç–∏ –Ω–µ—Ç")


@user_router_manager.message(F.text.casefold().contains("–Ω–∞–∑–∞–¥"))   # –õ–æ–≥–∏–∫–∞ –í–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô", reply_markup=main_menu.as_markup(
                            resize_keyboard=True))
    


@user_router_manager.callback_query(F.data.startswith("get_"))   # –õ–æ–≥–∏–∫–∞ –í–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
async def hot_handler(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    mesID = callback.message.message_id

    vokeb = await state.get_data()
    order_mes = vokeb.get("order_mes")
    order_chat = vokeb.get("order_chat")

    car_id = int(callback.data.split("_", 1)[1])

    car = await orm_get_car(session, car_id)

    car_info = (
                f"üöó **–ú–∞—Ä–∫–∞:** {car.mark}\n"
                f"üìç **–ú–æ–¥–µ–ª—å:** {car.model}\n"
                f"üìÖ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** {car.year}\n"
                f"üîã **–ï–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏:** {car.engine_volume} –ª\n"
                f"üë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:** {car.places}\n"
                f"üèÅ **–ü—Ä–æ–±–µ–≥:** {car.route} –∫–º\n"
                f"‚õΩ **–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:** {car.engine_type}\n"
                f"üîß **–¢–∏–ø –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á:** {car.box}\n"
                f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {car.cost:,} $\n"
            )

    await bot.edit_message_caption(
        callback.message.chat.id,
        mesID,
       caption = f'''
–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 5-10 –º–∏–Ω—É—Ç üïù
''',
        
        
        # reply_markup=get_callback_btns(btns={
        #         '–ù–µ –∂–¥–∞—Ç—å': f'end_{order_mes}',}),
        parse_mode='HTML'
    )

    await bot.send_message(
        config.MANAGERS_GROUP_ID,
        f'''
–ó–∞–∫–∞–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è #Ô∏è‚É£{car_id}

{car_info}
''',
       parse_mode='Markdown' 
    )

    forwarded_message = await bot.forward_message(
        chat_id=config.MANAGERS_GROUP_ID, 
        from_chat_id=callback.message.chat.id, 
        message_id=order_mes
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await orm_add_dialog(
        session, 
        client_id=order_chat, 
        client_message_id=forwarded_message.message_id  # ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )









#######################################     –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã    ###########################################

@user_router_manager.message(F.text.casefold().contains("–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã"))   # –õ–æ–≥–∏–∫–∞ –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞‚ùî", reply_markup=question_menu.as_markup(
                            resize_keyboard=True))
    


#######################################     –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã    ###########################################


@user_router_manager.message(F.text.casefold().contains("—á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"))  # –õ–æ–≥–∏–∫–∞ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
async def hot_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    def_questions = await orm_get_DefQuestions(session)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    question_btns = {question.question: f"question_{question.id}" for question in def_questions}
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    questionMessage = await message.answer(
        "–°–ø–∏—Å–æ–∫ –ß–∞—Å—Ç—ã—Ö –í–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=get_callback_btns_single_row(btns=question_btns, sizes=(1,))
    )
    await state.update_data(questionMessage = questionMessage.message_id)



@user_router_manager.callback_query(F.data.startswith("question_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
async def inline_button_handler(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    answerID = callback.data.removeprefix("question_")
    answer = await orm_get_DefQuestion(session, int(answerID))
    
    def_questions = await orm_get_DefQuestions(session)                                             # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    
    question_btns = {question.question: f"question_{question.id}" for question in def_questions}    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    vokeb = await state.get_data()
    questionMessage = int(vokeb.get("questionMessage"))
    await bot.edit_message_text(answer.answer, callback.message.chat.id, questionMessage,           # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
                                reply_markup=get_callback_btns_single_row(btns=question_btns, sizes=(1,))) 



#######################################     –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å    ###########################################

@user_router_manager.message(F.text.casefold().contains("–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))   # –õ–æ–≥–∏–∫–∞ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Statess.ask_question)



@user_router_manager.message(Statess.ask_question, F.text)   # –õ–æ–≥–∏–∫–∞ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
async def hot_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    mesID = message.message_id  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    delmes = await message.answer("–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
    await bot.send_message(chat_id=config.MANAGERS_GROUP_ID, text = "‚ùì–í–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞")
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    forwarded_message = await bot.forward_message(
        chat_id=config.MANAGERS_GROUP_ID, 
        from_chat_id=message.chat.id, 
        message_id=mesID
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await orm_add_dialog(
        session, 
        client_id=message.from_user.id, 
        client_message_id=forwarded_message.message_id  # ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )
    await bot.delete_message(message.chat.id, delmes.message_id)
    await message.answer(
        f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n<b>{message.text}</b>\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º‚úÖ\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Çüïú\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–∫–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –ø–æ–∫–∞ –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", 
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"end_{mesID}")]
            ]
        ),
        parse_mode='HTML'
    )
    await state.clear()



@user_router_manager.callback_query(StateFilter('*'), F.data.startswith("end_"))            # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
async def start_handler(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:

    await callback.message.delete()
    user_id = callback.message.chat.id
    # delmes = int(callback.data.removeprefix("end_"))

    # await bot.delete_message(callback.message.chat.id, delmes)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    await orm_end_dialog(session, client_id=user_id)
    await callback.message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!", reply_markup=main_menu.as_markup(
                            resize_keyboard=True))


@user_router_manager.message(F.text == "/end", F.reply_to_message)  # –ö–æ–º–∞–Ω–¥–∞ /end –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def end_dialog_with_reply(message: types.Message, session: AsyncSession) -> None:
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    replied_message = message.reply_to_message

    if not replied_message or not replied_message.forward_from:
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    client_id = replied_message.forward_from.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    dialog = await orm_get_dialog_by_client_message(session, client_message_id=replied_message.message_id)

    if not dialog:
        await message.reply("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    await bot.send_message(
        chat_id=client_id,
        text="–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
        reply_markup=main_menu.as_markup(resize_keyboard=True)
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await orm_end_dialog(session, client_id=client_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await message.reply("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")



@user_router_manager.message(StateFilter('*'),  F.reply_to_message)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
async def caught_query(message: types.Message, state: FSMContext, session: AsyncSession):
    managers = await orm_get_managers(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ë–î
    managerss = {manager.name : f"{manager.id}" for manager in managers}
    managers = [int(manager) for manager in managerss.values()]

    if message.from_user.id not in managers:
        await message.delete()
        await message.answer("‚ùå–ù–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç", reply_markup=main_menu.as_markup(
                            resize_keyboard=True))
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
    replied_message_id = message.reply_to_message.message_id
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    dialog = await orm_get_dialog_by_client_message(session, client_message_id=replied_message_id)

    if dialog:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
        sent_message = await bot.send_message(chat_id=dialog.client_id, text=f"<b>{message.from_user.first_name}</b>:\n{message.text}", parse_mode='HTML')

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –≤ –¥–∏–∞–ª–æ–≥–µ
        await orm_update_manager_in_dialog(
            session=session,
            client_message_id=dialog.client_message_id,
            manager_id=message.from_user.id,
            manager_message_id=sent_message.message_id
        )
        

    else:
        await message.answer("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=main_menu.as_markup(
                            resize_keyboard=True))


@user_router_manager.message()  # –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
async def hot_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    query = (
        select(Dialog)
        .where(Dialog.client_id == message.chat.id, Dialog.is_active == True)
    )
    result = await session.execute(query)
    dialog = result.scalar()

    if dialog and dialog.manager_id:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        forwarded_message = await bot.forward_message(
            chat_id=dialog.manager_id,
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        await orm_save_client_message(
            session=session,
            client_id=message.chat.id,
            manager_id=dialog.manager_id,
            client_message_id=forwarded_message.message_id,
            manager_message_id=message.message_id
        )

    else:
        await message.reply("–î–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ñ–µ–ª–∞–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?", reply_markup=question_menu.as_markup(
                            resize_keyboard=True))
