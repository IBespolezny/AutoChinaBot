import asyncio
import logging
import os
import re
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, StateFilter, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, Message, InlineKeyboardMarkup, InlineKeyboardButton
import requests

import config
from database.orm_query import orm_add_dialog, orm_end_dialog, orm_get_DefQuestion, orm_get_DefQuestions, orm_get_admins, orm_get_car, orm_get_car_by_flag, orm_get_cars_by_cost, orm_get_dialog_by_client_id, orm_get_dialog_by_client_message, orm_get_electrocars, orm_get_managers, orm_get_managers_group, orm_save_client_message, orm_update_manager_in_dialog
from database.models import Dialog
from filters.chat_filters import ChatTypeFilter

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

# from keybords.inline_kbds import get_callback_btns
from functions.functions import format_number, get_admins_and_managers, int_format, is_valid_phone_number
from keybords.inline_kbds import get_callback_btns, get_callback_btns_single_row, get_custom_callback_btns
from keybords.return_kbds import main_menu, hot_menu, question_menu, region_menu, engine_menu, old_or_new_menu

#######################################  –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π  ###################################################

messages = {}

class Statess(StatesGroup):
    Order = State()                         # –°–æ—Å—Ç–æ—è–Ω–∏–µ –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    add_admin_name = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞
    add_admin_id = State()                  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –∞–¥–º–∏–Ω–∞
    help_buy_auto = State()                  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –∞–¥–º–∏–Ω–∞
    Admin_kbd = State()                     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º
    Admin_settings = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    enter_cost = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    Manager_settings = State()              # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ú–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
    add_manager_name = State()              # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    add_manager_id = State()                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    Cars_by_cost_set = State()                  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∞—à–∏–Ω –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    Popular_cars_set = State()                  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∞—à–∏–Ω –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    Electrocars_set = State()                   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–æ–≤
    Cars_quee_set = State()                     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –ø—É—Ç–∏
    –°ars_in_set = State()                       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –Ω–∞–ª–∏—á–∏–∏
    DefQuestion_set = State()                   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    add_DefAnswer = State()                     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    DefQuestion_add = State()                   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    delete_auto = State()                   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    ask_question = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    consultation = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞

    choos_region = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    enter_engine_type = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    enter_phone_number = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞

    Mark = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ
    Model = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ
    Year = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    engine = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    engine_volume = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    route = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    rools = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    power = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    power_engin = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    photo = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    flag = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    electrocar = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    cost = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    power_bank = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    package = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    body = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ
    power_reserve = State()                              # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∞–≤—Ç–æ


#######################################  –§–∏–ª—å—Ç—Ä –≥—Ä—É–ø–ø   #########################################

user_router_manager = Router()
user_router_manager.message.filter(ChatTypeFilter(['private']))
bot = Bot(token=os.getenv("API_TOKEN"))



#######################################     –°—Ç–∞—Ç–∏—á–Ω—ã–µ –ö–æ–º–∞–Ω–¥—ã    ###########################################

@user_router_manager.message(StateFilter('*'), Command("start"))            # –û—á–∏—â–∞–µ—Ç –ú–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def start_handler(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(config.START_MESSAGE, reply_markup=main_menu.as_markup(
                            resize_keyboard=True), parse_mode='HTML')


@user_router_manager.message(F.text.casefold().contains("–Ω–∞–∑–∞–¥"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
async def cancel_handler(message: types.Message, state: FSMContext) -> None:

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô", reply_markup=main_menu.as_markup(
                            resize_keyboard=True))

#######################################     –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å    ###########################################

@user_router_manager.message(F.text.casefold().contains("–ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"))   # –õ–æ–≥–∏–∫–∞ –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=region_menu.as_markup(
                            resize_keyboard=True))
    await state.set_state(Statess.help_buy_auto)
    


@user_router_manager.message(Statess.help_buy_auto, F.text.casefold().contains("—Ä—Ñ"))
@user_router_manager.message(Statess.help_buy_auto, F.text.casefold().contains("—Ä–±"))   # –õ–æ–≥–∏–∫–∞ –†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    region = message.text
    await state.update_data(region = region)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:", reply_markup=engine_menu.as_markup(
                            resize_keyboard=True))


@user_router_manager.message(Statess.help_buy_auto, F.text.casefold().contains("–¥–≤—Å"))
@user_router_manager.message(Statess.help_buy_auto, F.text.casefold().contains("—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"))   # –õ–æ–≥–∏–∫–∞ –†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    engine_type = message.text
    await state.update_data(engine_type = engine_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=old_or_new_menu.as_markup(
                            resize_keyboard=True))


@user_router_manager.message(Statess.help_buy_auto, F.text.casefold().contains("–Ω–æ–≤—ã–π"))
@user_router_manager.message(Statess.help_buy_auto, F.text.casefold().contains("–±/—É"))   # –õ–æ–≥–∏–∫–∞ –†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async def hot_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    edge_type = message.text
    await state.update_data(edge_type = edge_type)
    vokeb = await state.get_data()

    mesID = message.message_id  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    delmes = await message.answer("–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")

    await bot.send_message(
        chat_id= await orm_get_managers_group(session), 
        text = f'''
–ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è üöó

<b>–†–µ–≥–∏–æ–Ω:</b> {vokeb.get("region")}
<b>–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {vokeb.get("engine_type")}
<b>–¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {vokeb.get("edge_type")}

‚¨áÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞‚¨áÔ∏è
''',
parse_mode='HTML'
        )
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    forwarded_message = await bot.forward_message(
        chat_id=await orm_get_managers_group(session), 
        from_chat_id=message.chat.id, 
        message_id=mesID
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await orm_add_dialog(
        session, 
        client_id=message.from_user.id, 
        client_message_id=forwarded_message.message_id  # ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )
    await bot.delete_message(message.chat.id, delmes.message_id)
    await message.answer(
        config.WAIT_MESSAGE, 
        reply_markup=main_menu.as_markup(
                            resize_keyboard=True),
        parse_mode='HTML'
    )
    await state.set_state(None)
















#######################################     –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å    ###########################################

@user_router_manager.message(F.text.casefold().contains("—Ä–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"))   # –õ–æ–≥–∏–∫–∞ –†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    del_mes = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=ReplyKeyboardRemove())
    await bot.delete_message(del_mes.chat.id, del_mes.message_id)

    main_mes = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await state.update_data(main_mes = main_mes.message_id)
    await state.set_state(Statess.enter_cost)


@user_router_manager.message(Statess.enter_cost, F.text)
async def enter_cost(message: types.Message, state: FSMContext):
    vokeb = await state.get_data()
    edit_mesID = int(vokeb.get("main_mes"))
    try:
        monet_for_buy = float(message.text)
    except ValueError:
        await message.delete()
        await bot.edit_message_text(
        "<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>\n\n–í–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 7900 –∏–ª–∏ 8500",
        message.chat.id,
        edit_mesID,
        parse_mode='HTML',)
        return

    
    await message.delete()

    if monet_for_buy < 5000:
        await bot.edit_message_text(
        "<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 5 000 $",
        message.chat.id,
        edit_mesID,
        parse_mode='HTML',
    )
        return
        
    await state.update_data(monet_for_buy = monet_for_buy)

    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
        message.chat.id,
        edit_mesID,
        reply_markup=get_custom_callback_btns(btns={
            'üáßüáæ –†–ë':'rb_',
            'üá∑üá∫ –†–§':'rf_',
            }, layout=[2]), 
    )
    await state.set_state(None)


@user_router_manager.callback_query(F.data.startswith("rb_"))
@user_router_manager.callback_query(F.data.startswith("rf_"))
async def next_car(callback: types.CallbackQuery, state: FSMContext):
    edit_mes = callback.message.message_id
    region = callback.data.replace("_", "")
    await state.update_data(region = region)

    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:",
        callback.message.chat.id,
        edit_mes,
        reply_markup=get_custom_callback_btns(btns={
            '–î–í–°':'–¥–≤—Å_',
            '–ì–∏–±—Ä–∏–¥':'–ì–∏–±—Ä–∏–¥_',
            '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π':'–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π_',
            }, layout=[2,1])
    )


@user_router_manager.callback_query(F.data.startswith("–ì–∏–±—Ä–∏–¥_"))
@user_router_manager.callback_query(F.data.startswith("–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π_"))
async def next_car(callback: types.CallbackQuery, state: FSMContext):
    edit_mes = callback.message.message_id
    await bot.edit_message_text(
        "–ò–¥—ë—Ç —Ä–∞—Å—á—ë—Ç...",
        callback.message.chat.id,
        edit_mes,
    )
    await asyncio.sleep(2)

    engine_type = callback.data.replace("_", "")
    await state.update_data(engine_type = engine_type)
    vokeb = await state.get_data()

    if vokeb.get("region") == "rb":
        if vokeb.get("engine_type") == "–ì–∏–±—Ä–∏–¥":
            cost = int(vokeb.get("monet_for_buy"))
            customs_cost = (cost / 100 * 24) + 500  # 500 $ –∑–∞ —Ç–∞–º–æ–∂–Ω—é + 24% –æ—Ç —Ü–µ–Ω—ã –∞–≤—Ç–æ
            delivery = 2300
            bank_comission = cost / 100 * 2  # 2% –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞
            final_cost = cost + customs_cost + delivery + bank_comission

        if vokeb.get("engine_type") == "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π":
            cost = int(vokeb.get("monet_for_buy"))
            customs_cost = 500  # 500 $ –∑–∞ —Ç–∞–º–æ–∂–Ω—é
            delivery = 2300
            bank_comission = cost / 100 * 2  # 2% –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞
            final_cost = cost + customs_cost + delivery + bank_comission
        await bot.edit_message_text(
        f'''
üöó –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ:  
__________________________

‚úÖ –¶–µ–Ω–∞ –∞–≤—Ç–æ: {format_number(cost)} $  
__________________________

‚úÖ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã: {format_number(customs_cost)} $  
__________________________

‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ú–∏–Ω—Å–∫–∞: {format_number(int(delivery))} $  
__________________________

‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è: {format_number(bank_comission)} $  
__________________________

üü¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: \n‚û°Ô∏è {format_number(int(final_cost))} $
''',
        callback.message.chat.id,
        edit_mes,
        reply_markup=get_custom_callback_btns(btns={
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':'check_',
            }, layout=[1])
    )
    
    elif vokeb.get("region") == "rf":
        await bot.edit_message_text(
            "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è",
            callback.message.chat.id,
            edit_mes
        )
        await state.set_state(Statess.enter_phone_number)


@user_router_manager.callback_query(F.data.startswith("–¥–≤—Å_"))
async def next_car(callback: types.CallbackQuery, state: FSMContext):
    edit_mes = callback.message.message_id
    engine_type = callback.data.replace("_", "")
    await state.update_data(engine_type = engine_type)
    
    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        callback.message.chat.id,
        edit_mes,
        reply_markup=get_custom_callback_btns(btns={
            '–¥–æ 3-—Ö –ª–µ—Ç':'–Ω–æ–≤—ã–π',
            '3-5 –ª–µ—Ç':'—Å—Ç–∞—Ä—ã–π',
            }, layout=[2])
    )


@user_router_manager.callback_query(F.data.startswith("–Ω–æ–≤—ã–π"))
@user_router_manager.callback_query(F.data.startswith("—Å—Ç–∞—Ä—ã–π"))
async def next_car(callback: types.CallbackQuery, state: FSMContext):
    edit_mes = callback.message.message_id

    edge_type = callback.data
    await state.update_data(edge_type = edge_type)
    vokeb = await state.get_data()

    if edge_type == "–Ω–æ–≤—ã–π":
        if vokeb.get("region") == "rf":
            await bot.edit_message_text(
            "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è",
            callback.message.chat.id,
            edit_mes
        )
            await state.set_state(Statess.enter_phone_number)
            return

        await bot.edit_message_text(
        "–ò–¥—ë—Ç —Ä–∞—Å—á—ë—Ç...",
        callback.message.chat.id,
        edit_mes,
    )
        await asyncio.sleep(2)

        cost = int(vokeb.get("monet_for_buy"))
        delivery = 2300
        bank_comission = cost / 100 * 2  # 2% –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞
        customs_cost = (cost / 100 * 24) + 500  # 500 $ –∑–∞ —Ç–∞–º–æ–∂–Ω—é + 24% –æ—Ç —Ü–µ–Ω—ã –∞–≤—Ç–æ
        final_cost = cost + customs_cost + delivery + bank_comission
        await bot.edit_message_text(
        f'''
üöó –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ:  
__________________________

‚úÖ –¶–µ–Ω–∞ –∞–≤—Ç–æ: {format_number(cost)} $  
__________________________

‚úÖ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã: {format_number(customs_cost)} $  
__________________________

‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ú–∏–Ω—Å–∫–∞: {format_number(int(delivery))} $  
__________________________

‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è: {format_number(bank_comission)} $  
__________________________

üü¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: \n‚û°Ô∏è {format_number(int(final_cost))} $
''',
        callback.message.chat.id,
        edit_mes,
        reply_markup=get_custom_callback_btns(btns={
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':'check_',
            }, layout=[1])
    )

    elif edge_type == "—Å—Ç–∞—Ä—ã–π":
        await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:",
        callback.message.chat.id,
        edit_mes,
        reply_markup=get_custom_callback_btns(btns={
            '–¥–æ 1500':'1500_',
            '1500-1800':'1500_1800',
            '1800-2300':'1800_2300',
            }, layout=[1,2])
    )


@user_router_manager.callback_query(F.data.startswith("1500_"))
@user_router_manager.callback_query(F.data.startswith("1500_1800"))
@user_router_manager.callback_query(F.data.startswith("1800_2300"))
async def next_car(callback: types.CallbackQuery, state: FSMContext):
    edit_mes = callback.message.message_id
    engine_str_volume = callback.data
    await state.update_data(engine_str_volume = engine_str_volume)
    vokeb = await state.get_data()

    if vokeb.get("region") == "rf":
        await bot.edit_message_text(
            "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è",
            callback.message.chat.id,
            edit_mes
        )
        await state.set_state(Statess.enter_phone_number)
        return
    
    await bot.edit_message_text(
        "–ò–¥—ë—Ç —Ä–∞—Å—á—ë—Ç...",
        callback.message.chat.id,
        edit_mes,
    )
    await asyncio.sleep(2)

    engine_volume = callback.data
    await state.update_data(engine_volume = engine_volume)
    cost = int(vokeb.get("monet_for_buy"))
    delivery = 2300
    bank_comission = cost / 100 * 2  # 2% –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞

    if engine_volume == "1500_":
        customs_cost = 1750
    elif engine_volume == "1500_1800":
        customs_cost = 3000
    elif engine_volume == "1800_2300":
        customs_cost = 3800

    final_cost = cost + customs_cost + delivery + bank_comission
    await bot.edit_message_text(
        f'''
üöó –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ:  
__________________________

‚úÖ –¶–µ–Ω–∞ –∞–≤—Ç–æ: {format_number(cost)} $  
__________________________

‚úÖ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã: {format_number(customs_cost)} $  
__________________________

‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ú–∏–Ω—Å–∫–∞: {format_number(int(delivery))} $  
__________________________

‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è: {format_number(bank_comission)} $  
__________________________

üü¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: \n‚û°Ô∏è {format_number(int(final_cost))} $
''',
        callback.message.chat.id,
        edit_mes,
        reply_markup=get_custom_callback_btns(btns={
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':'check_',
            }, layout=[1])
    )



@user_router_manager.callback_query(F.data.startswith("check_"))
async def next_car(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=main_menu.as_markup(
                            resize_keyboard=True))


@user_router_manager.message(Statess.enter_phone_number, F.text)
async def enter_cost(message: types.Message, state: FSMContext, session: AsyncSession):
    await message.delete()

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    vokeb = await state.get_data()
    edit_mesID = int(vokeb.get("main_mes"))
    phone_number = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    if not is_valid_phone_number(phone_number):
        await bot.edit_message_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞\n<b>{phone_number}</b>\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +1234567890", message.chat.id, edit_mesID, parse_mode='HTML')
        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–≤–µ—Ä–Ω—ã–π

    cost = int(vokeb.get("monet_for_buy"))
    engine_type = vokeb.get("engine_type")

    send_text = f'''
<b>–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>üí∏

–¶–µ–Ω–∞: {format_number(cost)} $
–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_type}

–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—è: @{message.from_user.username}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}
'''

    if vokeb.get("engine_str_volume"):
        engine_volume = vokeb.get("engine_str_volume")
        edge_type = vokeb.get("edge_type")
        send_text = f'''
<b>–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>üí∏

–¶–µ–Ω–∞: {format_number(cost)} $
–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_type}
–¢–∏–ø –∞–≤—Ç–æ: {edge_type}
–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume}

–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—è: @{message.from_user.username}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}

'''


    await bot.edit_message_text(
        "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—èüïê",
        message.chat.id,
        edit_mesID,
        reply_markup=get_custom_callback_btns(btns={
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':'check_',
            }, layout=[1])
    )

    await bot.send_message(
        await orm_get_managers_group(session),
        send_text,
parse_mode='HTML',
    )
    await state.set_state(None)
















#######################################     –ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è    ###########################################

@user_router_manager.message(F.text.casefold().contains("–≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüî•"))   # –õ–æ–≥–∏–∫–∞ –ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("üöó–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è", reply_markup=hot_menu.as_markup(
                            resize_keyboard=True))
    

    
@user_router_manager.message(F.text.casefold().contains("–ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"))
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(order_mes=message.message_id, order_chat=message.chat.id)
    vokeb = await state.get_data()
    del_mes = vokeb.get("send_message")
    if del_mes:
        await bot.delete_message(message.chat.id, del_mes)

    send_message = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è", reply_markup=get_callback_btns(btns={
                '–¥–æ 15 $$$': f'0_15000',
                '15 - 20 $$$': f'15000_20000',
                '20 - 30 $$$': f'20000_30000',
                '30+ $$$': f'30000_1000000',
            }),)
    await state.update_data(send_message = send_message.message_id)



@user_router_manager.message(F.text.casefold().contains("–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"))
async def hot_handler(message: types.Message, session: AsyncSession, state: FSMContext) -> None:
    await state.update_data(order_mes=message.message_id, order_chat=message.chat.id)
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)
    vokeb = await state.get_data()
    del_mes = vokeb.get("send_message")
    if del_mes:
        await bot.delete_message(message.chat.id, del_mes)
    
    cars = await orm_get_car_by_flag(session, "–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ")
    if cars:
        total_cars = len(cars)
        await state.update_data(cars_list=cars, current_index=0)
        car = cars[0]
        car_id = car.car_id
        if car.electrocar == "yes":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"
                
        elif car.electrocar == "no":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            
            if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ `electrocar` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            car_info = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è electrocar!"
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        btns = {'–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}'}
        if len(cars) > 1:
            btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': f'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': f'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            }
        
        send_message = await message.answer_photo(
            photo=car.photo,
            caption=car_info,
            reply_markup=get_callback_btns(btns=btns),
        )
        await state.update_data(send_message=send_message.message_id)
    else:
        send_message = await message.answer("üö´ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.update_data(send_message=send_message.message_id)
    

@user_router_manager.message(F.text.casefold().contains("—ç–ª–µ–∫—Ç—Ä–æ–∞–≤—Ç–æ–º–æ–±–∏–ª–∏"))
async def hot_handler(message: types.Message, session: AsyncSession, state: FSMContext) -> None:
    await state.update_data(order_mes=message.message_id, order_chat=message.chat.id)
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)
    vokeb = await state.get_data()
    del_mes = vokeb.get("send_message")
    if del_mes:
        await bot.delete_message(message.chat.id, del_mes)
    
    cars = await orm_get_electrocars(session)
    if cars:
        total_cars = len(cars)
        await state.update_data(cars_list=cars, current_index=0)
        car = cars[0]
        car_id = car.car_id

        car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
        if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"


        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        btns = {'–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}'}
        if len(cars) > 1:
            btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': f'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': f'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            }

        send_message = await message.answer_photo(
            photo=car.photo,
            caption=car_info,
            parse_mode="Markdown",
            reply_markup=get_callback_btns(btns=btns),
        )
        await state.update_data(send_message=send_message.message_id)
    else:
        send_message = await message.answer("üö´ –≠–ª–µ–∫—Ç—Ä–æ–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.update_data(send_message=send_message.message_id)


@user_router_manager.message(F.text.casefold().contains("–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –ø—É—Ç–∏"))
async def hot_handler(message: types.Message, session: AsyncSession, state: FSMContext) -> None:
    await state.update_data(order_mes=message.message_id, order_chat=message.chat.id)
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)
    vokeb = await state.get_data()
    del_mes = vokeb.get("send_message")
    if del_mes:
        await bot.delete_message(message.chat.id, del_mes)
    
    cars = await orm_get_car_by_flag(session, "–≤ –ø—É—Ç–∏")
    if cars:
        total_cars = len(cars)
        await state.update_data(cars_list=cars, current_index=0)
        car = cars[0]
        car_id = car.car_id
        if car.electrocar == "yes":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {car.power_bank} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"
                
        elif car.electrocar == "no":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
            if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ `electrocar` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            car_info = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è electrocar!"
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        btns = {'–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}'}
        if len(cars) > 1:
            btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': f'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': f'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            }
        
        send_message = await message.answer_photo(
            photo=car.photo,
            caption=car_info,
            parse_mode="Markdown",
            reply_markup=get_callback_btns(btns=btns),
        )
        await state.update_data(send_message=send_message.message_id)
    else:
        send_message = await message.answer("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.update_data(send_message=send_message.message_id)


@user_router_manager.message(F.text.casefold().contains("–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏"))
async def hot_handler(message: types.Message, session: AsyncSession, state: FSMContext) -> None:
    await state.update_data(order_mes=message.message_id, order_chat=message.chat.id)
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)
    vokeb = await state.get_data()
    del_mes = vokeb.get("send_message")
    if del_mes:
        await bot.delete_message(message.chat.id, del_mes)
        
    cars = await orm_get_car_by_flag(session, "–≤ –Ω–∞–ª–∏—á–∏–∏")
    if cars:
        total_cars = len(cars)
        await state.update_data(cars_list=cars, current_index=0)
        car = cars[0]
        car_id = car.car_id
        if car.electrocar == "yes":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        elif car.electrocar == "no":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
            if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ `electrocar` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            car_info = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è electrocar!"
        
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        btns = {'–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}'}
        if len(cars) > 1:
            btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': f'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': f'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            }

        send_message = await message.answer_photo(
            photo=car.photo,
            caption=car_info,
            parse_mode="Markdown",
            reply_markup=get_callback_btns(btns=btns),
        )
        await state.update_data(send_message=send_message.message_id)
    else:
        send_message = await message.answer("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.update_data(send_message=send_message.message_id)
    






@user_router_manager.callback_query(F.data.startswith("right"))
async def next_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)
    data = await state.get_data()
    cars = data.get("cars_list", [])
    index = data.get("current_index", 0)
    message_id = data.get("send_message")
    chat_id = data.get("order_chat")
    
    if cars:
        total_cars = len(cars)
        index = (index + 1) % len(cars)
        await state.update_data(current_index=index)
        car = cars[index]
        car_id = car.car_id

        if car.electrocar == "yes":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            if callback.from_user.id in admins_ids or callback.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        elif car.electrocar == "no":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
            if callback.from_user.id in admins_ids or callback.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ `electrocar` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            car_info = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è electrocar!"

        await callback.bot.edit_message_media(
            media=types.InputMediaPhoto(media=car.photo, caption=car_info, parse_mode="Markdown"),
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=get_callback_btns(btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': f'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': f'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            })
        )
    await callback.answer()


@user_router_manager.callback_query(F.data.startswith("left"))
async def prev_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)
    data = await state.get_data()
    cars = data.get("cars_list", [])
    index = data.get("current_index", 0)
    message_id = data.get("send_message")
    chat_id = data.get("order_chat")
    
    if cars:
        total_cars = len(cars)
        index = (index - 1) % len(cars)
        await state.update_data(current_index=index)
        car = cars[index]
        car_id = car.car_id

        if car.electrocar == "yes":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            if callback.from_user.id in admins_ids or callback.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        elif car.electrocar == "no":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
            if callback.from_user.id in admins_ids or callback.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ `electrocar` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            car_info = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è electrocar!"

        await callback.bot.edit_message_media(
            media=types.InputMediaPhoto(media=car.photo, caption=car_info, parse_mode="Markdown"),
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=get_callback_btns(btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': f'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': f'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            })
        )
    await callback.answer()



@user_router_manager.callback_query(F.data.startswith("get_"))   # –õ–æ–≥–∏–∫–∞ –í–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
async def hot_handler(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    mesID = callback.message.message_id

    vokeb = await state.get_data()
    order_mes = vokeb.get("order_mes")
    order_chat = vokeb.get("order_chat")

    car_id = int(callback.data.split("_", 1)[1])

    car = await orm_get_car(session, car_id)
    if car.electrocar == "yes":
        car_info = (f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
'''                       
            )
        
    if car.electrocar == "no":
        car_info = (f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
'''                       
            )

    await bot.edit_message_caption(
        callback.message.chat.id,
        mesID,
        caption = f'''
–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 5-10 –º–∏–Ω—É—Ç üïù
''', 
        parse_mode='HTML'
    )

    await bot.send_message(
        await orm_get_managers_group(session),
        f'''
–ó–∞–∫–∞–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è #Ô∏è‚É£{car_id}
{car_info}

‚¨áÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞‚¨áÔ∏è
''',
       parse_mode='HTML' 
    )

    forwarded_message = await bot.forward_message(
        chat_id=await orm_get_managers_group(session), 
        from_chat_id=callback.message.chat.id, 
        message_id=order_mes
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await orm_add_dialog(
        session, 
        client_id=order_chat, 
        client_message_id=forwarded_message.message_id  # ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )


@user_router_manager.callback_query(F.data.startswith("0_15000"))
@user_router_manager.callback_query(F.data.startswith("15000_20000"))
@user_router_manager.callback_query(F.data.startswith("20000_30000"))
@user_router_manager.callback_query(F.data.startswith("30000_1000000"))
async def prev_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    car_cost = callback.data
    vokeb = await state.get_data()
    del_mes = vokeb.get("send_message")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if del_mes:
        await bot.delete_message(callback.message.chat.id, del_mes)

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    min_val, max_val = map(float, car_cost.split('_'))
    cars = await orm_get_cars_by_cost(session, min_val, max_val)  # —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ

    if cars:
        total_cars = len(cars)
        await state.update_data(cars_list=cars, current_index=0)
        car = cars[0]
        car_id = car.car_id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–æ–º
        if car.electrocar.lower() == "yes":  # –∏—Å–ø—Ä–∞–≤–∏–ª –Ω–∞ lower(), —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
            car_info = (
                f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥
üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
''')

            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
            if callback.from_user.id in admins_ids or callback.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        elif car.electrocar.lower() == "no":
            car_info = (
                f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥
üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
''')

            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
            if callback.from_user.id in admins_ids or callback.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ `electrocar` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            car_info = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è electrocar!"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        btns = {'–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}'}
        if len(cars) > 1:
            btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': 'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': 'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            }

        send_message = await callback.message.answer_photo(
            photo=car.photo,
            caption=car_info,
            parse_mode="HTML",
            reply_markup=get_callback_btns(btns=btns),
        )
        await state.update_data(send_message=send_message.message_id)
    else:
        send_message = await callback.message.answer("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ —Ç–∞–∫–æ–π —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.update_data(send_message=send_message.message_id)





















#######################################     –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã    ###########################################

@user_router_manager.message(F.text.casefold().contains("–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã"))   # –õ–æ–≥–∏–∫–∞ –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞‚ùî", reply_markup=question_menu.as_markup(
                            resize_keyboard=True))
    






#######################################     –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã    ###########################################


@user_router_manager.message(F.text.casefold().contains("—á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"))  # –õ–æ–≥–∏–∫–∞ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
async def hot_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    def_questions = await orm_get_DefQuestions(session)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    question_btns = {question.question: f"question_{question.id}" for question in def_questions}
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    questionMessage = await message.answer(
        "–°–ø–∏—Å–æ–∫ –ß–∞—Å—Ç—ã—Ö –í–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=get_callback_btns_single_row(btns=question_btns, sizes=(1,))
    )
    await state.update_data(questionMessage = questionMessage.message_id)



@user_router_manager.callback_query(F.data.startswith("question_")) # –û–±–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
async def inline_button_handler(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    answerID = callback.data.removeprefix("question_")
    answer = await orm_get_DefQuestion(session, int(answerID))
    
    def_questions = await orm_get_DefQuestions(session)                                             # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    
    question_btns = {question.question: f"question_{question.id}" for question in def_questions}    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    vokeb = await state.get_data()
    questionMessage = int(vokeb.get("questionMessage"))
    await bot.edit_message_text(answer.answer, callback.message.chat.id, questionMessage,           # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
                                reply_markup=get_callback_btns_single_row(btns=question_btns, sizes=(1,))) 













#######################################     –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å    ###########################################

@user_router_manager.message(F.text.casefold().contains("–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))   # –õ–æ–≥–∏–∫–∞ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Statess.ask_question)



@user_router_manager.message(Statess.ask_question, F.text)   # –õ–æ–≥–∏–∫–∞ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
async def hot_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    mesID = message.message_id  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    delmes = await message.answer("–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
    await bot.send_message(chat_id=await orm_get_managers_group(session), text = "‚ùì–í–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n\n‚¨áÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞‚¨áÔ∏è")
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    forwarded_message = await bot.forward_message(
        chat_id=await orm_get_managers_group(session), 
        from_chat_id=message.chat.id, 
        message_id=mesID
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await orm_add_dialog(
        session, 
        client_id=message.from_user.id, 
        client_message_id=forwarded_message.message_id  # ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )
    await bot.delete_message(message.chat.id, delmes.message_id)
    await message.answer(
        f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n<b>{message.text}</b>\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º‚úÖ\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Çüïú\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–∫–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –ø–æ–∫–∞ –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", 
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"end_{mesID}")]
            ]
        ),
        parse_mode='HTML'
    )
    await state.clear()



@user_router_manager.callback_query(StateFilter('*'), F.data.startswith("end_"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
async def start_handler(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    await callback.message.delete()
    user_id = callback.message.chat.id
    user_name = callback.from_user.full_name

    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ client_message_id
    dialog = await orm_get_dialog_by_client_id(session, user_id)

    if dialog and dialog.manager_id:
        await bot.send_message(int(dialog.manager_id), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.")


    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    await orm_end_dialog(session, client_id=user_id)

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer(
        "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!",
        reply_markup=main_menu.as_markup(resize_keyboard=True)
    )



@user_router_manager.message(F.text == "/end", F.reply_to_message)  # –ö–æ–º–∞–Ω–¥–∞ /end –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def end_dialog_with_reply(message: types.Message, session: AsyncSession, bot: Bot) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    replied_message = message.reply_to_message

    if not replied_message:
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    dialog = await orm_get_dialog_by_client_message(session, client_message_id=replied_message.message_id)

    if not dialog:
        await message.reply("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    client_id = dialog.client_id

    if not client_id:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    try:
        await bot.send_message(
            chat_id=client_id,
            text="–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
            reply_markup=main_menu.as_markup(resize_keyboard=True)
        )
    except Exception:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await orm_end_dialog(session, client_id=client_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await message.reply("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")



@user_router_manager.message(StateFilter('*'),  F.reply_to_message)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
async def caught_query(message: types.Message, state: FSMContext, session: AsyncSession):
    managers = await orm_get_managers(session) # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ë–î
    managerss = {manager.name : f"{manager.id}" for manager in managers}
    managers = [int(manager) for manager in managerss.values()]

    if message.from_user.id not in managers:
        await message.delete()
        await message.answer("‚ùå–ù–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç", reply_markup=main_menu.as_markup(
                            resize_keyboard=True))
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
    replied_message_id = message.reply_to_message.message_id
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    dialog = await orm_get_dialog_by_client_message(session, client_message_id=replied_message_id)

    if dialog:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
        sent_message = await bot.send_message(chat_id=dialog.client_id, text=f"<b>{message.from_user.first_name}</b>:\n{message.text}", parse_mode='HTML')

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –≤ –¥–∏–∞–ª–æ–≥–µ
        await orm_update_manager_in_dialog(
            session=session,
            client_message_id=dialog.client_message_id,
            manager_id=message.from_user.id,
            manager_message_id=sent_message.message_id
        )
        

    else:
        await message.answer("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=main_menu.as_markup(
                            resize_keyboard=True))


@user_router_manager.message()  # –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
async def hot_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    query = (
        select(Dialog)
        .where(Dialog.client_id == message.chat.id, Dialog.is_active == True)
    )
    result = await session.execute(query)
    dialog = result.scalar()

    if dialog and dialog.manager_id:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        forwarded_message = await bot.forward_message(
            chat_id=dialog.manager_id,
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        await orm_save_client_message(
            session=session,
            client_id=message.chat.id,
            manager_id=dialog.manager_id,
            client_message_id=forwarded_message.message_id,
            manager_message_id=message.message_id
        )

    else:
        await message.reply("–î–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ñ–µ–ª–∞–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?", reply_markup=question_menu.as_markup(
                            resize_keyboard=True))
