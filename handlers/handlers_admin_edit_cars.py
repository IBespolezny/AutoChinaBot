import asyncio
import os
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import Bot, types, F, Router
from aiogram.filters import Command, StateFilter, BaseFilter
from aiogram.fsm.context import FSMContext
from database.models import Cars
from database.orm_query import orm_add_DefQuestion, orm_add_admin, orm_add_car, orm_add_manager, orm_delete_DefQuestion, orm_delete_admin, orm_delete_car, orm_delete_manager, orm_get_DefQuestions, orm_get_admin, orm_get_admins, orm_get_calculate_column_value, orm_get_car, orm_get_cars, orm_get_managers, orm_update_calculate_column, update_car_field
from filters.chat_filters import ChatTypeFilter
import config

from aiogram.utils.media_group import MediaGroupBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from functions.functions import get_admins_and_managers, int_format
from handlers.handlers_user import Statess
from keybords.inline_kbds import get_callback_btns, get_callback_btns_single_row, get_custom_callback_btns, orm_delete_car_buttons
from keybords.return_kbds import admin_menu, access_settings, admin_settings, manager_settings, auto_settings, add_del_back_menu
# from keybords.inline_kbds import get_callback_btns

bot = Bot(token=os.getenv("API_TOKEN"))


#################################   –§–∏–ª—å—Ç—Ä –≥—Ä—É–ø–ø   #################################

admin_edit_cars = Router()
admin_edit_cars.message.filter(ChatTypeFilter(['private'])) # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
# user_group_router.message.middleware(AlbumMiddleware())


################################ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å ###########################

@admin_edit_cars.message(Statess.Admin_kbd, F.text.casefold().contains("—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"))
async def show_car_list(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    await message.delete()


    cars = await orm_get_cars(session)
    if not cars:
        await message.answer("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –∞–≤—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    if cars:
        btns = {f"{car_mark} {car_model} {int(car_cost)}": f"update_car_{car_id}" for car_id, car_mark, car_model, car_cost in cars}
        btns["–ù–∞–∑–∞–¥"] = "bback_"

    edit_mes = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
reply_markup=get_callback_btns_single_row(btns=btns),
parse_mode='HTML'
    )
    await state.update_data(edit_mes_id = edit_mes.message_id)


@admin_edit_cars.callback_query(F.data.startswith("update_car_"))
async def delete_selected_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    await callback.message.delete()
    car_id = int(callback.data.split("_")[2])  # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ callback_data
    vokeb = await state.get_data()
    edit_mes_id = vokeb.get("edit_mes_id")
    edit_car = await orm_get_car(session, car_id)

    if edit_car.electrocar == "yes":
        send_text = f'''
{edit_car.mark} {edit_car.model} {edit_car.package}, {edit_car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: {int_format(edit_car.cost)} $
üö© –§–ª–∞–≥: {edit_car.flag}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(edit_car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(edit_car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(edit_car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {edit_car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {edit_car.body}
'''     
        btns={
                "–¶–µ–Ω–∞": "edit_cost",
                "–§–ª–∞–≥": "edit_flag",
                "–ü—Ä–æ–±–µ–≥": "edit_route",
                "–ó–∞–ø–∞—Å —Ö–æ–¥–∞": "edit_power_reserve",
                "–ë–∞—Ç–∞—Ä–µ—è": "edit_power_bank",
                "–ü—Ä–∏–≤–æ–¥": "edit_weel_drive",
                "–ö—É–∑–æ–≤": "edit_body",
                "–§–æ—Ç–æ": "edit_photo",
                "–ù–∞–∑–∞–¥": "back_to_car_list",
            }
        layout=[2, 2, 2, 2, 1]


        
    elif edit_car.electrocar == "no":
        send_text = f'''
{edit_car.mark} {edit_car.model} {edit_car.package}, {edit_car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: {int_format(edit_car.cost)} $
üö© –§–ª–∞–≥: {edit_car.flag}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(edit_car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {edit_car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {edit_car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(edit_car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {edit_car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {edit_car.body}
'''
        btns={
            "–¶–µ–Ω–∞":"edit_cost",
            "–§–ª–∞–≥":"edit_flag",
            "–ü—Ä–æ–±–µ–≥":"edit_route",
            "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞":"edit_engine_type",
            "–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è":"edit_engine_volume",
            "–ú–æ—â–Ω–æ—Å—Ç—å":"edit_power",
            "–ü—Ä–∏–≤–æ–¥":"edit_weel_drive",
            "–ö—É–∑–æ–≤":"edit_body",
            "–§–æ—Ç–æ":"edit_photo",
            "–ù–∞–∑–∞–¥":"back_to_car_list",
        }
        layout=[2, 2, 2, 2, 1, 1]
        
    del_mes = await bot.send_photo(
        callback.message.chat.id,
        edit_car.photo,
        caption=send_text,
        reply_markup=get_custom_callback_btns(btns=btns, layout=layout
        )
    )
    await state.update_data(del_mes_id = del_mes.message_id)
    await state.update_data(car_id = car_id)






####################### –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –≤—ã–±–æ—Ä–∞ #####################

@admin_edit_cars.callback_query(F.data.startswith("edit_cost"))
@admin_edit_cars.callback_query(F.data.startswith("edit_route"))
@admin_edit_cars.callback_query(F.data.startswith("edit_engine_volume"))
@admin_edit_cars.callback_query(F.data.startswith("edit_power_reserve")) # –≠–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä
@admin_edit_cars.callback_query(F.data.startswith("edit_power_bank")) # –≠–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä
async def edit_car_param(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    await callback.message.delete()
    
    param_mapping = {
        "cost": "—Ü–µ–Ω—ã",
        "route": "–ø—Ä–æ–±–µ–≥–∞",
        "engine_volume": "–æ–±—ä—ë–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è",
        "power_reserve": "–∑–∞–ø–∞—Å–∞ —Ö–æ–¥–∞",
        "power_bank": "–±–∞—Ç–∞—Ä–µ–∏"
    }

    param_key = callback.data.replace("edit_", "")
    edit_param = param_mapping.get(param_key, param_key)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    await state.update_data(edit_param=param_key) 

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ state
    data = await state.get_data()
    car_id = data.get("car_id")
    
    edit_mes = await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {edit_param}:", reply_markup=get_callback_btns_single_row(btns={"–ù–∞–∑–∞–¥":f"back_to_car_{car_id}"}))
    await state.set_state(Statess.Edit_car_int)
    await state.update_data(edit_mes_id = edit_mes.message_id)

    


@admin_edit_cars.message(Statess.Edit_car_int, F.text)
async def save_car_param(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î."""
    await message.delete()
    data = await state.get_data()
    car_id = data.get("car_id")
    edit_mes_id = int(data.get("edit_mes_id"))
    edit_param = data.get("edit_param")

    try:
        new_value = float(message.text.replace(",", "."))

    
    except ValueError:
        await bot.edit_message_text(
            f"‚ùå –ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n<b>{message.text}</b>\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 123 –∏–ª–∏ 123,12",
            message.chat.id,
            edit_mes_id,
            reply_markup=get_callback_btns_single_row(btns={"–ù–∞–∑–∞–¥":f"back_to_car_{car_id}"}),
            parse_mode='HTML'
        )
        return

    if new_value < 0:
        await bot.edit_message_text(
            f"‚ùå –ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n<b>{new_value}</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 0",
            message.chat.id,
            edit_mes_id,
            reply_markup=get_callback_btns_single_row(btns={"–ù–∞–∑–∞–¥":f"back_to_car_{car_id}"}),
            parse_mode='HTML'
        )
        return
    await update_car_field(session, car_id, edit_param, new_value)

    edit_car = await orm_get_car(session, car_id)
    if edit_car.electrocar == "yes":
        send_text = f'''
{edit_car.mark} {edit_car.model} {edit_car.package}, {edit_car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: {int_format(edit_car.cost)} $
üö© –§–ª–∞–≥: {edit_car.flag}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(edit_car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(edit_car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(edit_car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {edit_car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {edit_car.body}
'''
        btns={
                "–¶–µ–Ω–∞": "edit_cost",
                "–§–ª–∞–≥": "edit_flag",
                "–ü—Ä–æ–±–µ–≥": "edit_route",
                "–ó–∞–ø–∞—Å —Ö–æ–¥–∞": "edit_power_reserve",
                "–ë–∞—Ç–∞—Ä–µ—è": "edit_power_bank",
                "–ü—Ä–∏–≤–æ–¥": "edit_weel_drive",
                "–ö—É–∑–æ–≤": "edit_body",
                "–§–æ—Ç–æ": "edit_photo",
                "–ù–∞–∑–∞–¥": "back_to_car_list",
            }
        layout=[2, 2, 2, 2, 1]

    else:
        send_text = f'''
{edit_car.mark} {edit_car.model} {edit_car.package}, {edit_car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: {int_format(edit_car.cost)} $
üö© –§–ª–∞–≥: {edit_car.flag}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(edit_car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {edit_car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {edit_car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(edit_car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {edit_car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {edit_car.body}
'''
        btns={
            "–¶–µ–Ω–∞":"edit_cost",
            "–§–ª–∞–≥":"edit_flag",
            "–ü—Ä–æ–±–µ–≥":"edit_route",
            "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞":"edit_engine_type",
            "–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è":"edit_engine_volume",
            "–ú–æ—â–Ω–æ—Å—Ç—å":"edit_power",
            "–ü—Ä–∏–≤–æ–¥":"edit_weel_drive",
            "–ö—É–∑–æ–≤":"edit_body",
            "–§–æ—Ç–æ":"edit_photo",
            "–ù–∞–∑–∞–¥":"back_to_car_list",
        }
        layout=[2, 2, 2, 2, 1, 1]

    await bot.send_photo(
        message.chat.id,
        edit_car.photo,
        caption=send_text,
        reply_markup=get_custom_callback_btns(btns=btns, layout=layout)
    )
    await bot.delete_message(message.chat.id, int(edit_mes_id))
    await state.set_state(Statess.Admin_kbd)
    





############################ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º ###########################

@admin_edit_cars.callback_query(F.data.startswith("edit_flag"))
@admin_edit_cars.callback_query(F.data.startswith("edit_weel_drive"))
@admin_edit_cars.callback_query(F.data.startswith("edit_body"))
@admin_edit_cars.callback_query(F.data.startswith("edit_photo"))
@admin_edit_cars.callback_query(F.data.startswith("edit_engine_type"))
async def edit_car_param(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    await callback.message.delete()
    data = await state.get_data()
    car_id = data.get("car_id")
    
    if callback.data == "edit_flag":
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –§–ª–∞–≥:", 
            reply_markup=get_custom_callback_btns(btns={
                '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π üî•': '_–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ',
                '–í –ø—É—Ç–∏ üó∫Ô∏è': '_–≤ –ø—É—Ç–∏',
                '–í –Ω–∞–ª–∏—á–∏–∏ üèÅ': '_–≤ –Ω–∞–ª–∏—á–∏–∏',
                '‚ùå': '_–Ω–µ—Ç',
                '–ù–∞–∑–∞–¥':f'back_to_car_{car_id}'
            }, layout=[2,2]))
        await state.update_data(field = "flag")
        
    elif callback.data == "edit_weel_drive":
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", 
            reply_markup=get_custom_callback_btns(btns={
                '–ü–µ—Ä–µ–¥–Ω–∏–π': '_–ø–µ—Ä–µ–¥–Ω–∏–π',
                '–ó–∞–¥–Ω–∏–π': '_–∑–∞–¥–Ω–∏–π',
                '–ü–æ–ª–Ω—ã–π': '_–ø–æ–ª–Ω—ã–π',
                '–ù–∞–∑–∞–¥':f'back_to_car_{car_id}'
            }, layout=[2,1,1]))
        await state.update_data(field = "weel_drive")

    elif callback.data == "edit_body":
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", 
            reply_markup=get_custom_callback_btns(btns={
                '–°–µ–¥–∞–Ω': '_–°–µ–¥–∞–Ω',
                '–•—ç—Ç—á–±–µ–∫': '_–•—ç—Ç—á–±–µ–∫',
                '–õ–∏—Ñ—Ç–±–µ–∫': '_–õ–∏—Ñ—Ç–±–µ–∫',
                '–£–Ω–∏–≤–µ—Ä—Å–∞–ª': '_–£–Ω–∏–≤–µ—Ä—Å–∞–ª',
                '–ö—É–ø–µ': '_–ö—É–ø–µ',
                '–ö–∞–±—Ä–∏–æ–ª–µ—Ç': '_–ö–∞–±—Ä–∏–æ–ª–µ—Ç',
                '–ú–∏–Ω–∏–≤—ç–Ω': '_–ú–∏–Ω–∏–≤—ç–Ω',
                '–ú–∏–∫—Ä–æ–≤—ç–Ω': '_–ú–∏–∫—Ä–æ–≤—ç–Ω',
                '–ö—Ä–æ—Å—Å–æ–≤–µ—Ä': '_–ö—Ä–æ—Å—Å–æ–≤–µ—Ä',
                '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫': '_–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫',
                '–ü–∏–∫–∞–ø': '_–ü–∏–∫–∞–ø',
                '–õ–∏–º—É–∑–∏–Ω': '_–õ–∏–º—É–∑–∏–Ω',
                '–ù–∞–∑–∞–¥':f'back_to_car_{car_id}'
            }, layout=[2,2,2,2,2,2,1]))
        await state.update_data(field = "body")

    elif callback.data == "edit_engine_type":
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", 
            reply_markup=get_custom_callback_btns(btns={
                '–î–í–°': '_–î–í–°',
                '–ì–∏–±—Ä–∏–¥': '_–≥–∏–±—Ä–∏–¥',
                '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π': '_—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π',
                '–ù–∞–∑–∞–¥':f'back_to_car_{car_id}'
            }, layout=[2,1,1]))
        await state.update_data(field = "engine_type")

    elif callback.data == "edit_photo":
        edit_mes_photo = await callback.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ",
            reply_markup=get_custom_callback_btns(btns={
                '–ù–∞–∑–∞–¥':f'back_to_car_{car_id}'
            }, layout=[1]))
        await state.set_state(Statess.Edit_car_photo)
        await state.update_data(edit_mes_photo_id = edit_mes_photo.message_id)





@admin_edit_cars.callback_query(F.data.startswith("_–î–í–°"))
@admin_edit_cars.callback_query(F.data.startswith("_–≥–∏–±—Ä–∏–¥"))
@admin_edit_cars.callback_query(F.data.startswith("_—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"))
@admin_edit_cars.callback_query(F.data.startswith("_–°–µ–¥–∞–Ω"))
@admin_edit_cars.callback_query(F.data.startswith("_–•—ç—Ç—á–±–µ–∫"))
@admin_edit_cars.callback_query(F.data.startswith("_–õ–∏—Ñ—Ç–±–µ–∫"))
@admin_edit_cars.callback_query(F.data.startswith("_–£–Ω–∏–≤–µ—Ä—Å–∞–ª"))
@admin_edit_cars.callback_query(F.data.startswith("_–ö—É–ø–µ"))
@admin_edit_cars.callback_query(F.data.startswith("_–ö–∞–±—Ä–∏–æ–ª–µ—Ç"))
@admin_edit_cars.callback_query(F.data.startswith("_–ú–∏–Ω–∏–≤—ç–Ω"))
@admin_edit_cars.callback_query(F.data.startswith("_–ú–∏–∫—Ä–æ–≤—ç–Ω"))
@admin_edit_cars.callback_query(F.data.startswith("_–ö—Ä–æ—Å—Å–æ–≤–µ—Ä"))
@admin_edit_cars.callback_query(F.data.startswith("_–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫"))
@admin_edit_cars.callback_query(F.data.startswith("_–ü–∏–∫–∞–ø"))
@admin_edit_cars.callback_query(F.data.startswith("_–õ–∏–º—É–∑–∏–Ω"))
@admin_edit_cars.callback_query(F.data.startswith("_–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ"))
@admin_edit_cars.callback_query(F.data.startswith("_–≤ –ø—É—Ç–∏"))
@admin_edit_cars.callback_query(F.data.startswith("_–≤ –Ω–∞–ª–∏—á–∏–∏"))
@admin_edit_cars.callback_query(F.data.startswith("_–Ω–µ—Ç"))
@admin_edit_cars.callback_query(F.data.startswith("_–ø–µ—Ä–µ–¥–Ω–∏–π"))
@admin_edit_cars.callback_query(F.data.startswith("_–∑–∞–¥–Ω–∏–π"))
@admin_edit_cars.callback_query(F.data.startswith("_–ø–æ–ª–Ω—ã–π"))
async def save_flag(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    await callback.message.delete()

    new_value = callback.data.replace("_", "")
    data = await state.get_data()
    car_id = data.get("car_id")
    field = data.get("field")

    
    await update_car_field(session, car_id, field, new_value)

    edit_car = await orm_get_car(session, car_id)
    if edit_car.electrocar == "yes":
        send_text = f'''
{edit_car.mark} {edit_car.model} {edit_car.package}, {edit_car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: {int_format(edit_car.cost)} $
üö© –§–ª–∞–≥: {edit_car.flag}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(edit_car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(edit_car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(edit_car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {edit_car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {edit_car.body}
'''
        btns={
                "–¶–µ–Ω–∞": "edit_cost",
                "–§–ª–∞–≥": "edit_flag",
                "–ü—Ä–æ–±–µ–≥": "edit_route",
                "–ó–∞–ø–∞—Å —Ö–æ–¥–∞": "edit_power_reserve",
                "–ë–∞—Ç–∞—Ä–µ—è": "edit_power_bank",
                "–ü—Ä–∏–≤–æ–¥": "edit_weel_drive",
                "–ö—É–∑–æ–≤": "edit_body",
                "–§–æ—Ç–æ": "edit_photo",
                "–ù–∞–∑–∞–¥": "back_to_car_list",
            }
        layout=[2, 2, 2, 2, 1]
    else:
        send_text = f'''
{edit_car.mark} {edit_car.model} {edit_car.package}, {edit_car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: {int_format(edit_car.cost)} $
üö© –§–ª–∞–≥: {edit_car.flag}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(edit_car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {edit_car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {edit_car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(edit_car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {edit_car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {edit_car.body}
'''
        btns={
            "–¶–µ–Ω–∞":"edit_cost",
            "–§–ª–∞–≥":"edit_flag",
            "–ü—Ä–æ–±–µ–≥":"edit_route",
            "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞":"edit_engine_type",
            "–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è":"edit_engine_volume",
            "–ú–æ—â–Ω–æ—Å—Ç—å":"edit_power",
            "–ü—Ä–∏–≤–æ–¥":"edit_weel_drive",
            "–ö—É–∑–æ–≤":"edit_body",
            "–§–æ—Ç–æ":"edit_photo",
            "–ù–∞–∑–∞–¥":"back_to_car_list",
        }
        layout=[2, 2, 2, 2, 1, 1]

    await bot.send_photo(
        callback.message.chat.id,
        edit_car.photo,
        caption=send_text,
        reply_markup=get_custom_callback_btns(btns=btns, layout=layout)
    )



@admin_edit_cars.message(Statess.Edit_car_photo, F.photo | F.document)
async def save_car_photo(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ø—Ä–∏—à–µ–¥—à–µ–µ –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç)."""
    await message.delete()
    data = await state.get_data()
    car_id = data.get("car_id")
    edit_mes = int(data.get("edit_mes_photo_id"))
    field = "photo"
    new_value = None

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if message.document and message.document.mime_type.startswith("image/"):
        new_value = message.document.file_id
    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–æ—Ç–æ (—Å–ø–∏—Å–æ–∫ PhotoSize, –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ)
    elif message.photo:
        new_value = message.photo[-1].file_id
    else:
        await bot.edit_message_text(
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ª–∏–±–æ –∫–∞–∫ —Ñ–æ—Ç–æ, –ª–∏–±–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º",
            message.chat.id,
            edit_mes,
            reply_markup=get_custom_callback_btns(btns={
                '–ù–∞–∑–∞–¥':f'back_to_car_{car_id}'
            }, layout=[1])
            )
        return

    await update_car_field(session, car_id, field, new_value)
    await state.set_state(Statess.Admin_kbd)
    edit_car = await orm_get_car(session, car_id)
    if edit_car.electrocar == "yes":
        send_text = f'''
{edit_car.mark} {edit_car.model} {edit_car.package}, {edit_car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: {int_format(edit_car.cost)} $
üö© –§–ª–∞–≥: {edit_car.flag}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(edit_car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(edit_car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(edit_car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {edit_car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {edit_car.body}
'''
        btns={
                "–¶–µ–Ω–∞": "edit_cost",
                "–§–ª–∞–≥": "edit_flag",
                "–ü—Ä–æ–±–µ–≥": "edit_route",
                "–ó–∞–ø–∞—Å —Ö–æ–¥–∞": "edit_power_reserve",
                "–ë–∞—Ç–∞—Ä–µ—è": "edit_power_bank",
                "–ü—Ä–∏–≤–æ–¥": "edit_weel_drive",
                "–ö—É–∑–æ–≤": "edit_body",
                "–§–æ—Ç–æ": "edit_photo",
                "–ù–∞–∑–∞–¥": "back_to_car_list",
            }
        layout=[2, 2, 2, 2, 1]
    else:
        send_text = f'''
{edit_car.mark} {edit_car.model} {edit_car.package}, {edit_car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: {int_format(edit_car.cost)} $
üö© –§–ª–∞–≥: {edit_car.flag}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(edit_car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {edit_car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {edit_car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(edit_car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {edit_car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {edit_car.body}
'''
        btns={
            "–¶–µ–Ω–∞":"edit_cost",
            "–§–ª–∞–≥":"edit_flag",
            "–ü—Ä–æ–±–µ–≥":"edit_route",
            "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞":"edit_engine_type",
            "–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è":"edit_engine_volume",
            "–ú–æ—â–Ω–æ—Å—Ç—å":"edit_power",
            "–ü—Ä–∏–≤–æ–¥":"edit_weel_drive",
            "–ö—É–∑–æ–≤":"edit_body",
            "–§–æ—Ç–æ":"edit_photo",
            "–ù–∞–∑–∞–¥":"back_to_car_list",
        }
        layout=[2, 2, 2, 2, 1, 1]

    await bot.delete_message(message.chat.id, edit_mes)

    await bot.send_photo(
        message.chat.id,
        edit_car.photo,
        caption=send_text,
        reply_markup=get_custom_callback_btns(btns=btns, layout=layout)
    )





############################# –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ ############################


@admin_edit_cars.callback_query(F.data.startswith("back_to_car_list"))
async def edit_car_param(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    await callback.message.delete()

    cars = await orm_get_cars(session)
    if not cars:
        await callback.message.answer("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –∞–≤—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    if cars:
        btns = {f"{car_mark} {car_model} {int(car_cost)}": f"update_car_{car_id}" for car_id, car_mark, car_model, car_cost in cars}
        btns["–ù–∞–∑–∞–¥"] = "bback_"

    edit_mes = await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
reply_markup=get_callback_btns_single_row(btns=btns),
parse_mode='HTML'
    )
    await state.update_data(edit_mes_id = edit_mes.message_id)




@admin_edit_cars.callback_query(F.data.startswith("back_to_car_"))
async def back_to_edit_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    car_id_str = callback.data.replace("back_to_car_", "")
    car_id = int(car_id_str)
    
    await callback.message.delete()
    edit_car = await orm_get_car(session, car_id)
    if edit_car.electrocar == "yes":
        send_text = f'''
{edit_car.mark} {edit_car.model} {edit_car.package}, {edit_car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: {int_format(edit_car.cost)} $
üö© –§–ª–∞–≥: {edit_car.flag}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(edit_car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(edit_car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(edit_car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {edit_car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {edit_car.body}
'''
        btns={
                "–¶–µ–Ω–∞": "edit_cost",
                "–§–ª–∞–≥": "edit_flag",
                "–ü—Ä–æ–±–µ–≥": "edit_route",
                "–ó–∞–ø–∞—Å —Ö–æ–¥–∞": "edit_power_reserve",
                "–ë–∞—Ç–∞—Ä–µ—è": "edit_power_bank",
                "–ü—Ä–∏–≤–æ–¥": "edit_weel_drive",
                "–ö—É–∑–æ–≤": "edit_body",
                "–§–æ—Ç–æ": "edit_photo",
                "–ù–∞–∑–∞–¥": "back_to_car_list",
            }
        layout=[2, 2, 2, 2, 1]
    else:
        send_text = f'''
{edit_car.mark} {edit_car.model} {edit_car.package}, {edit_car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(edit_car.cost)}
üö© –§–ª–∞–≥: {edit_car.flag}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(edit_car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {edit_car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {edit_car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(edit_car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {edit_car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {edit_car.body}
'''
        btns={
            "–¶–µ–Ω–∞":"edit_cost",
            "–§–ª–∞–≥":"edit_flag",
            "–ü—Ä–æ–±–µ–≥":"edit_route",
            "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞":"edit_engine_type",
            "–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è":"edit_engine_volume",
            "–ú–æ—â–Ω–æ—Å—Ç—å":"edit_power",
            "–ü—Ä–∏–≤–æ–¥":"edit_weel_drive",
            "–ö—É–∑–æ–≤":"edit_body",
            "–§–æ—Ç–æ":"edit_photo",
            "–ù–∞–∑–∞–¥":"back_to_car_list",
        }
        layout=[2, 2, 2, 2, 1, 1]

    del_mes = await bot.send_photo(
        callback.message.chat.id,
        edit_car.photo,
        caption=send_text,
        reply_markup=get_custom_callback_btns(btns=btns, layout=layout)
    )




@admin_edit_cars.callback_query(F.data.startswith("bback_"))
async def edit_car_param(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    await callback.message.delete()

    await state.set_state(Statess.Admin_kbd)



