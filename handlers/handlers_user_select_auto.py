import asyncio
import os
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import Bot, types, F, Router
from aiogram.filters import Command, StateFilter, BaseFilter
from aiogram.fsm.context import FSMContext
from database.models import Cars
from database.orm_query import orm_add_DefQuestion, orm_add_admin, orm_add_car, orm_add_dialog, orm_add_manager, orm_delete_DefQuestion, orm_delete_admin, orm_delete_car, orm_delete_manager, orm_get_DefQuestions, orm_get_admin, orm_get_admins, orm_get_calculate_column_value, orm_get_cars, orm_get_managers, orm_get_managers_group, orm_update_calculate_column
from filters.chat_filters import ChatTypeFilter
import config

from aiogram.utils.media_group import MediaGroupBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from functions.functions import get_admins_and_managers
from handlers.handlers_user import Statess
from keybords.inline_kbds import get_callback_btns, get_callback_btns_single_row, get_custom_callback_btns, orm_delete_car_buttons
from keybords.return_kbds import region_menu, engine_menu, old_or_new_menu, main_menu
# from keybords.inline_kbds import get_callback_btns

bot = Bot(token=os.getenv("API_TOKEN"))


#################################   –§–∏–ª—å—Ç—Ä –≥—Ä—É–ø–ø   #################################

user_select_car = Router()
user_select_car.message.filter(ChatTypeFilter(['private'])) # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
# user_group_router.message.middleware(AlbumMiddleware())



#######################################     –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å    ###########################################

@user_select_car.message(F.text.casefold().contains("–ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"))   # –õ–æ–≥–∏–∫–∞ –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=region_menu.as_markup(
                            resize_keyboard=True))
    await state.set_state(Statess.help_buy_auto)
    


@user_select_car.message(Statess.help_buy_auto, F.text.casefold().contains("—Ä—Ñ"))
@user_select_car.message(Statess.help_buy_auto, F.text.casefold().contains("—Ä–±"))   # –õ–æ–≥–∏–∫–∞ –†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    region = message.text
    await state.update_data(region = region)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:", reply_markup=engine_menu.as_markup(
                            resize_keyboard=True))


@user_select_car.message(Statess.help_buy_auto, F.text.casefold().contains("–¥–≤—Å"))
@user_select_car.message(Statess.help_buy_auto, F.text.casefold().contains("—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"))   # –õ–æ–≥–∏–∫–∞ –†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    engine_type = message.text
    await state.update_data(engine_type = engine_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=old_or_new_menu.as_markup(
                            resize_keyboard=True))


@user_select_car.message(Statess.help_buy_auto, F.text.casefold().contains("–Ω–æ–≤—ã–π"))
@user_select_car.message(Statess.help_buy_auto, F.text.casefold().contains("–±/—É"))   # –õ–æ–≥–∏–∫–∞ –†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async def hot_handler(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    edge_type = message.text
    await state.update_data(edge_type = edge_type)
    vokeb = await state.get_data()

    mesID = message.message_id  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    delmes = await message.answer("–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")

    await bot.send_message(
        chat_id= await orm_get_managers_group(session), 
        text = f'''
–ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è üöó

<b>–†–µ–≥–∏–æ–Ω:</b> {vokeb.get("region")}
<b>–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {vokeb.get("engine_type")}
<b>–¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {vokeb.get("edge_type")}

‚¨áÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞‚¨áÔ∏è
''',
parse_mode='HTML'
        )
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    forwarded_message = await bot.forward_message(
        chat_id=await orm_get_managers_group(session), 
        from_chat_id=message.chat.id, 
        message_id=mesID
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await orm_add_dialog(
        session, 
        client_id=message.from_user.id, 
        client_message_id=forwarded_message.message_id  # ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )
    await bot.delete_message(message.chat.id, delmes.message_id)
    await message.answer(
        config.WAIT_MESSAGE, 
        reply_markup=main_menu.as_markup(
                            resize_keyboard=True),
        parse_mode='HTML'
    )
    await state.set_state(None)

