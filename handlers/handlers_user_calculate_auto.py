import asyncio
import os
from traceback import format_list
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import Bot, types, F, Router
from aiogram.filters import Command, StateFilter, BaseFilter
from aiogram.fsm.context import FSMContext
from database.models import Cars
from database.orm_query import orm_add_DefQuestion, orm_add_admin, orm_add_car, orm_add_manager, orm_delete_DefQuestion, orm_delete_admin, orm_delete_car, orm_delete_manager, orm_get_DefQuestions, orm_get_admin, orm_get_admins, orm_get_calculate_column_value, orm_get_cars, orm_get_managers, orm_get_managers_group, orm_update_calculate_column
from filters.chat_filters import ChatTypeFilter
import config

from aiogram.utils.media_group import MediaGroupBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from functions.functions import format_number, get_admins_and_managers, int_format, is_valid_phone_number
from handlers.handlers_user import Statess
from keybords.inline_kbds import get_callback_btns, get_callback_btns_single_row, get_custom_callback_btns, orm_delete_car_buttons
from keybords.return_kbds import main_menu
# from keybords.inline_kbds import get_callback_btns

bot = Bot(token=os.getenv("API_TOKEN"))


#################################   –§–∏–ª—å—Ç—Ä –≥—Ä—É–ø–ø   #################################

user_calculate_router = Router()
user_calculate_router.message.filter(ChatTypeFilter(['private'])) # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
# user_group_router.message.middleware(AlbumMiddleware())



#######################################     –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å    ###########################################

@user_calculate_router.message(F.text.casefold().contains("—Ä–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"))   # –õ–æ–≥–∏–∫–∞ –†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    del_mes = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=ReplyKeyboardRemove())
    await bot.delete_message(del_mes.chat.id, del_mes.message_id)

    main_mes = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await state.update_data(main_mes = main_mes.message_id)
    await state.set_state(Statess.enter_cost)


@user_calculate_router.message(Statess.enter_cost, F.text)
async def enter_cost(message: types.Message, state: FSMContext, session: AsyncSession):
    vokeb = await state.get_data()
    edit_mesID = int(vokeb.get("main_mes"))
    min_cost = await orm_get_calculate_column_value(session, "min_cost")
    try:
        monet_for_buy = float(message.text)
    except ValueError:
        await message.delete()
        await bot.edit_message_text(
        "<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>\n\n–í–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 7900 –∏–ª–∏ 8500",
        message.chat.id,
        edit_mesID,
        parse_mode='HTML',)
        return

    
    await message.delete()

    if monet_for_buy < min_cost:
        await bot.edit_message_text(
        f"<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ <b>{int_format(min_cost)}</b> $",
        message.chat.id,
        edit_mesID,
        parse_mode='HTML',
    )
        return
        
    await state.update_data(monet_for_buy = monet_for_buy)

    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
        message.chat.id,
        edit_mesID,
        reply_markup=get_custom_callback_btns(btns={
            'üáßüáæ –†–ë':'rb_',
            'üá∑üá∫ –†–§':'rf_',
            }, layout=[2]), 
    )
    await state.set_state(None)


@user_calculate_router.callback_query(F.data.startswith("rb_"))
@user_calculate_router.callback_query(F.data.startswith("rf_"))
async def next_car(callback: types.CallbackQuery, state: FSMContext):
    edit_mes = callback.message.message_id
    region = callback.data.replace("_", "")
    await state.update_data(region = region)

    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:",
        callback.message.chat.id,
        edit_mes,
        reply_markup=get_custom_callback_btns(btns={
            '–î–í–°':'–¥–≤—Å_',
            '–ì–∏–±—Ä–∏–¥':'–ì–∏–±—Ä–∏–¥_',
            '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π':'–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π_',
            }, layout=[2,1])
    )


@user_calculate_router.callback_query(F.data.startswith("–ì–∏–±—Ä–∏–¥_"))
@user_calculate_router.callback_query(F.data.startswith("–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π_"))
async def next_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    edit_mes = callback.message.message_id
    comis_rb = await orm_get_calculate_column_value(session, "comis_rb")
    bank_comis = await orm_get_calculate_column_value(session, "bank_comis")
    custom = await orm_get_calculate_column_value(session, "custom")
    delivery = await orm_get_calculate_column_value(session, "delivery")

    await bot.edit_message_text(
        "–ò–¥—ë—Ç —Ä–∞—Å—á—ë—Ç...",
        callback.message.chat.id,
        edit_mes,
    )
    await asyncio.sleep(2)

    engine_type = callback.data.replace("_", "")
    await state.update_data(engine_type = engine_type)
    vokeb = await state.get_data()

    if vokeb.get("region") == "rb":
        if vokeb.get("engine_type") == "–ì–∏–±—Ä–∏–¥":
            cost = int(vokeb.get("monet_for_buy"))
            customs_cost = (cost / 100 * comis_rb) + custom  # 500 $ –∑–∞ —Ç–∞–º–æ–∂–Ω—é + 24% –æ—Ç —Ü–µ–Ω—ã –∞–≤—Ç–æ
            bank_comission = cost / 100 * bank_comis  # –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞
            final_cost = cost + customs_cost + delivery + bank_comission

        if vokeb.get("engine_type") == "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π":
            cost = int(vokeb.get("monet_for_buy"))
            customs_cost = custom  # 500 $ –∑–∞ —Ç–∞–º–æ–∂–Ω—é
            bank_comission = cost / 100 * bank_comis  # 2% –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞
            final_cost = cost + customs_cost + delivery + bank_comission
        await bot.edit_message_text(
        f'''
üöó –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ:  
__________________________

‚úÖ –¶–µ–Ω–∞ –∞–≤—Ç–æ: {format_number(cost)} $  
__________________________

‚úÖ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã: {int_format(customs_cost)} $  
__________________________

‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ú–∏–Ω—Å–∫–∞: {format_number(int(delivery))} $  
__________________________

‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è: {format_number(bank_comission)} $  
__________________________

üü¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: \n‚û°Ô∏è {format_number(int(final_cost))} $
''',
        callback.message.chat.id,
        edit_mes,
        reply_markup=get_custom_callback_btns(btns={
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':'check_',
            }, layout=[1])
    )
    
    elif vokeb.get("region") == "rf":
        await bot.edit_message_text(
            "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è",
            callback.message.chat.id,
            edit_mes
        )
        await state.set_state(Statess.enter_phone_number)


@user_calculate_router.callback_query(F.data.startswith("–¥–≤—Å_"))
async def next_car(callback: types.CallbackQuery, state: FSMContext):
    edit_mes = callback.message.message_id
    engine_type = callback.data.replace("_", "")
    await state.update_data(engine_type = engine_type)
    
    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        callback.message.chat.id,
        edit_mes,
        reply_markup=get_custom_callback_btns(btns={
            '–¥–æ 3-—Ö –ª–µ—Ç':'–Ω–æ–≤—ã–π',
            '3-5 –ª–µ—Ç':'—Å—Ç–∞—Ä—ã–π',
            }, layout=[2])
    )


@user_calculate_router.callback_query(F.data.startswith("–Ω–æ–≤—ã–π"))
@user_calculate_router.callback_query(F.data.startswith("—Å—Ç–∞—Ä—ã–π"))
async def next_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    edit_mes = callback.message.message_id

    comis_rb = await orm_get_calculate_column_value(session, "comis_rb")
    bank_comis = await orm_get_calculate_column_value(session, "bank_comis")
    custom = await orm_get_calculate_column_value(session, "custom")
    delivery = await orm_get_calculate_column_value(session, "delivery")

    edge_type = callback.data
    await state.update_data(edge_type = edge_type)
    vokeb = await state.get_data()

    if edge_type == "–Ω–æ–≤—ã–π":
        if vokeb.get("region") == "rf":
            await bot.edit_message_text(
            "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è",
            callback.message.chat.id,
            edit_mes
        )
            await state.set_state(Statess.enter_phone_number)
            return

        await bot.edit_message_text(
        "–ò–¥—ë—Ç —Ä–∞—Å—á—ë—Ç...",
        callback.message.chat.id,
        edit_mes,
    )
        await asyncio.sleep(2)

        cost = int(vokeb.get("monet_for_buy"))
        bank_comission = cost / 100 * bank_comis  # 2% –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞
        customs_cost = (cost / 100 * comis_rb) + custom  # 500 $ –∑–∞ —Ç–∞–º–æ–∂–Ω—é + 24% –æ—Ç —Ü–µ–Ω—ã –∞–≤—Ç–æ
        final_cost = cost + customs_cost + delivery + bank_comission
        await bot.edit_message_text(
        f'''
üöó –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ:  
__________________________

‚úÖ –¶–µ–Ω–∞ –∞–≤—Ç–æ: {format_number(cost)} $  
__________________________

‚úÖ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã: {int_format(customs_cost)} $  
__________________________

‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ú–∏–Ω—Å–∫–∞: {format_number(int(delivery))} $  
__________________________

‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è: {format_number(bank_comission)} $  
__________________________

üü¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: \n‚û°Ô∏è {format_number(int(final_cost))} $
''',
        callback.message.chat.id,
        edit_mes,
        reply_markup=get_custom_callback_btns(btns={
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':'check_',
            }, layout=[1])
    )

    elif edge_type == "—Å—Ç–∞—Ä—ã–π":
        await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:",
        callback.message.chat.id,
        edit_mes,
        reply_markup=get_custom_callback_btns(btns={
            '–¥–æ 1500':'1500_',
            '1500-1800':'1500_1800',
            '1800-2300':'1800_2300',
            }, layout=[1,2])
    )


@user_calculate_router.callback_query(F.data.startswith("1500_"))
@user_calculate_router.callback_query(F.data.startswith("1500_1800"))
@user_calculate_router.callback_query(F.data.startswith("1800_2300"))
async def next_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    edit_mes = callback.message.message_id
    engine_str_volume = callback.data
    await state.update_data(engine_str_volume = engine_str_volume)
    vokeb = await state.get_data()

    comis_rb = await orm_get_calculate_column_value(session, "comis_rb")
    bank_comis = await orm_get_calculate_column_value(session, "bank_comis")
    custom = await orm_get_calculate_column_value(session, "custom")
    delivery = await orm_get_calculate_column_value(session, "delivery")

    if vokeb.get("region") == "rf":
        await bot.edit_message_text(
            "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è",
            callback.message.chat.id,
            edit_mes
        )
        await state.set_state(Statess.enter_phone_number)
        return
    
    await bot.edit_message_text(
        "–ò–¥—ë—Ç —Ä–∞—Å—á—ë—Ç...",
        callback.message.chat.id,
        edit_mes,
    )
    await asyncio.sleep(2)

    engine_volume = callback.data
    await state.update_data(engine_volume = engine_volume)
    cost = int(vokeb.get("monet_for_buy"))
    bank_comission = cost / 100 * bank_comis  # 2% –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞

    if engine_volume == "1500_":
        customs_cost = await orm_get_calculate_column_value(session, "engine_volume_1500")
    elif engine_volume == "1500_1800":
        customs_cost = await orm_get_calculate_column_value(session, "engine_volume_1500_1800")
    elif engine_volume == "1800_2300":
        customs_cost = await orm_get_calculate_column_value(session, "engine_volume_1800_2300")

    final_cost = cost + customs_cost + delivery + bank_comission
    await bot.edit_message_text(
        f'''
üöó –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ:  
__________________________

‚úÖ –¶–µ–Ω–∞ –∞–≤—Ç–æ: {format_number(cost)} $  
__________________________

‚úÖ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã: {int_format(customs_cost)} $  
__________________________

‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ú–∏–Ω—Å–∫–∞: {format_number(int(delivery))} $  
__________________________

‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è: {format_number(bank_comission)} $  
__________________________

üü¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: \n‚û°Ô∏è {format_number(int(final_cost))} $
''',
        callback.message.chat.id,
        edit_mes,
        reply_markup=get_custom_callback_btns(btns={
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':'check_',
            }, layout=[1])
    )



@user_calculate_router.callback_query(F.data.startswith("check_"))
async def next_car(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=main_menu.as_markup(
                            resize_keyboard=True))


@user_calculate_router.message(Statess.enter_phone_number, F.text)
async def enter_cost(message: types.Message, state: FSMContext, session: AsyncSession):
    await message.delete()

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    vokeb = await state.get_data()
    edit_mesID = int(vokeb.get("main_mes"))
    phone_number = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    if not is_valid_phone_number(phone_number):
        await bot.edit_message_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞\n<b>{phone_number}</b>\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +1234567890", message.chat.id, edit_mesID, parse_mode='HTML')
        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–≤–µ—Ä–Ω—ã–π

    cost = int(vokeb.get("monet_for_buy"))
    engine_type = vokeb.get("engine_type")

    send_text = f'''
<b>–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>üí∏

–¶–µ–Ω–∞: {format_number(cost)} $
–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_type}

–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—è: @{message.from_user.username}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}
'''

    if vokeb.get("engine_str_volume"):
        engine_volume = vokeb.get("engine_str_volume")
        edge_type = vokeb.get("edge_type")
        send_text = f'''
<b>–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>üí∏

–¶–µ–Ω–∞: {format_number(cost)} $
–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_type}
–¢–∏–ø –∞–≤—Ç–æ: {edge_type}
–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume}

–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—è: @{message.from_user.username}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}

'''


    await bot.edit_message_text(
        "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—èüïê",
        message.chat.id,
        edit_mesID,
        reply_markup=get_custom_callback_btns(btns={
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':'check_',
            }, layout=[1])
    )

    await bot.send_message(
        await orm_get_managers_group(session),
        send_text,
parse_mode='HTML',
    )
    await state.set_state(None)
