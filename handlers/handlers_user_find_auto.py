import asyncio
import os
from traceback import format_list
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import Bot, types, F, Router
from aiogram.filters import Command, StateFilter, BaseFilter
from aiogram.fsm.context import FSMContext
from database.models import Cars
from database.orm_query import orm_add_DefQuestion, orm_add_admin, orm_add_car, orm_add_dialog, orm_add_manager, orm_delete_DefQuestion, orm_delete_admin, orm_delete_car, orm_delete_manager, orm_get_DefQuestions, orm_get_admin, orm_get_admins, orm_get_calculate_column_value, orm_get_car, orm_get_car_by_flag, orm_get_cars, orm_get_cars_by_cost, orm_get_electrocars, orm_get_managers, orm_get_managers_group, orm_update_calculate_column
from filters.chat_filters import ChatTypeFilter
import config

from aiogram.utils.media_group import MediaGroupBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from functions.functions import format_number, get_admins_and_managers, int_format, is_valid_phone_number
from handlers.handlers_user import Statess
from keybords.inline_kbds import get_callback_btns, get_callback_btns_single_row, get_custom_callback_btns, orm_delete_car_buttons
from keybords.return_kbds import main_menu, hot_menu
# from keybords.inline_kbds import get_callback_btns

bot = Bot(token=os.getenv("API_TOKEN"))


#################################   –§–∏–ª—å—Ç—Ä –≥—Ä—É–ø–ø   #################################

user_find_auto = Router()
user_find_auto.message.filter(ChatTypeFilter(['private'])) # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
# user_group_router.message.middleware(AlbumMiddleware())



#######################################     –ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è    ###########################################

@user_find_auto.message(F.text.casefold().contains("–≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüî•"))   # –õ–æ–≥–∏–∫–∞ –ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer("üöó–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è", reply_markup=hot_menu.as_markup(
                            resize_keyboard=True))
    

    
@user_find_auto.message(F.text.casefold().contains("–ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"))
async def hot_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(order_mes=message.message_id, order_chat=message.chat.id)
    vokeb = await state.get_data()
    del_mes = vokeb.get("send_message")
    if del_mes:
        await bot.delete_message(message.chat.id, del_mes)

    send_message = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è", reply_markup=get_callback_btns(btns={
                '–¥–æ 15 $$$': f'0_15000',
                '15 - 20 $$$': f'15000_20000',
                '20 - 30 $$$': f'20000_30000',
                '30+ $$$': f'30000_1000000',
            }),)
    await state.update_data(send_message = send_message.message_id)



@user_find_auto.message(F.text.casefold().contains("–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"))
async def hot_handler(message: types.Message, session: AsyncSession, state: FSMContext) -> None:
    await state.update_data(order_mes=message.message_id, order_chat=message.chat.id)
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)
    vokeb = await state.get_data()
    del_mes = vokeb.get("send_message")
    if del_mes:
        await bot.delete_message(message.chat.id, del_mes)
    
    cars = await orm_get_car_by_flag(session, "–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ")
    if cars:
        total_cars = len(cars)
        await state.update_data(cars_list=cars, current_index=0)
        car = cars[0]
        car_id = car.car_id
        if car.electrocar == "yes":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"
                
        elif car.electrocar == "no":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            
            if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ `electrocar` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            car_info = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è electrocar!"
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        btns = {'–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}'}
        if len(cars) > 1:
            btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': f'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': f'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            }
        
        send_message = await message.answer_photo(
            photo=car.photo,
            caption=car_info,
            reply_markup=get_callback_btns(btns=btns),
        )
        await state.update_data(send_message=send_message.message_id)
    else:
        send_message = await message.answer("üö´ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.update_data(send_message=send_message.message_id)
    

@user_find_auto.message(F.text.casefold().contains("—ç–ª–µ–∫—Ç—Ä–æ–∞–≤—Ç–æ–º–æ–±–∏–ª–∏"))
async def hot_handler(message: types.Message, session: AsyncSession, state: FSMContext) -> None:
    await state.update_data(order_mes=message.message_id, order_chat=message.chat.id)
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)
    vokeb = await state.get_data()
    del_mes = vokeb.get("send_message")
    if del_mes:
        await bot.delete_message(message.chat.id, del_mes)
    
    cars = await orm_get_electrocars(session)
    if cars:
        total_cars = len(cars)
        await state.update_data(cars_list=cars, current_index=0)
        car = cars[0]
        car_id = car.car_id

        car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
        if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"


        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        btns = {'–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}'}
        if len(cars) > 1:
            btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': f'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': f'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            }

        send_message = await message.answer_photo(
            photo=car.photo,
            caption=car_info,
            parse_mode="Markdown",
            reply_markup=get_callback_btns(btns=btns),
        )
        await state.update_data(send_message=send_message.message_id)
    else:
        send_message = await message.answer("üö´ –≠–ª–µ–∫—Ç—Ä–æ–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.update_data(send_message=send_message.message_id)


@user_find_auto.message(F.text.casefold().contains("–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –ø—É—Ç–∏"))
async def hot_handler(message: types.Message, session: AsyncSession, state: FSMContext) -> None:
    await state.update_data(order_mes=message.message_id, order_chat=message.chat.id)
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)
    vokeb = await state.get_data()
    del_mes = vokeb.get("send_message")
    if del_mes:
        await bot.delete_message(message.chat.id, del_mes)
    
    cars = await orm_get_car_by_flag(session, "–≤ –ø—É—Ç–∏")
    if cars:
        total_cars = len(cars)
        await state.update_data(cars_list=cars, current_index=0)
        car = cars[0]
        car_id = car.car_id
        if car.electrocar == "yes":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {car.power_bank} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"
                
        elif car.electrocar == "no":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
            if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ `electrocar` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            car_info = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è electrocar!"
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        btns = {'–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}'}
        if len(cars) > 1:
            btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': f'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': f'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            }
        
        send_message = await message.answer_photo(
            photo=car.photo,
            caption=car_info,
            parse_mode="Markdown",
            reply_markup=get_callback_btns(btns=btns),
        )
        await state.update_data(send_message=send_message.message_id)
    else:
        send_message = await message.answer("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.update_data(send_message=send_message.message_id)


@user_find_auto.message(F.text.casefold().contains("–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏"))
async def hot_handler(message: types.Message, session: AsyncSession, state: FSMContext) -> None:
    await state.update_data(order_mes=message.message_id, order_chat=message.chat.id)
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)
    vokeb = await state.get_data()
    del_mes = vokeb.get("send_message")
    if del_mes:
        await bot.delete_message(message.chat.id, del_mes)
        
    cars = await orm_get_car_by_flag(session, "–≤ –Ω–∞–ª–∏—á–∏–∏")
    if cars:
        total_cars = len(cars)
        await state.update_data(cars_list=cars, current_index=0)
        car = cars[0]
        car_id = car.car_id
        if car.electrocar == "yes":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        elif car.electrocar == "no":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)}

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
            if message.from_user.id in admins_ids or message.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ `electrocar` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            car_info = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è electrocar!"
        
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        btns = {'–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}'}
        if len(cars) > 1:
            btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': f'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': f'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            }

        send_message = await message.answer_photo(
            photo=car.photo,
            caption=car_info,
            parse_mode="Markdown",
            reply_markup=get_callback_btns(btns=btns),
        )
        await state.update_data(send_message=send_message.message_id)
    else:
        send_message = await message.answer("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.update_data(send_message=send_message.message_id)
    






@user_find_auto.callback_query(F.data.startswith("right"))
async def next_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)
    data = await state.get_data()
    cars = data.get("cars_list", [])
    index = data.get("current_index", 0)
    message_id = data.get("send_message")
    chat_id = data.get("order_chat")
    
    if cars:
        total_cars = len(cars)
        index = (index + 1) % len(cars)
        await state.update_data(current_index=index)
        car = cars[index]
        car_id = car.car_id

        if car.electrocar == "yes":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            if callback.from_user.id in admins_ids or callback.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        elif car.electrocar == "no":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
            if callback.from_user.id in admins_ids or callback.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ `electrocar` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            car_info = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è electrocar!"

        await callback.bot.edit_message_media(
            media=types.InputMediaPhoto(media=car.photo, caption=car_info, parse_mode="Markdown"),
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=get_callback_btns(btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': f'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': f'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            })
        )
    await callback.answer()


@user_find_auto.callback_query(F.data.startswith("left"))
async def prev_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)
    data = await state.get_data()
    cars = data.get("cars_list", [])
    index = data.get("current_index", 0)
    message_id = data.get("send_message")
    chat_id = data.get("order_chat")
    
    if cars:
        total_cars = len(cars)
        index = (index - 1) % len(cars)
        await state.update_data(current_index=index)
        car = cars[index]
        car_id = car.car_id

        if car.electrocar == "yes":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            if callback.from_user.id in admins_ids or callback.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        elif car.electrocar == "no":
            car_info = (
            f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
'''
        )
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
            if callback.from_user.id in admins_ids or callback.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ `electrocar` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            car_info = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è electrocar!"

        await callback.bot.edit_message_media(
            media=types.InputMediaPhoto(media=car.photo, caption=car_info, parse_mode="Markdown"),
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=get_callback_btns(btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': f'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': f'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            })
        )
    await callback.answer()



@user_find_auto.callback_query(F.data.startswith("get_"))   # –õ–æ–≥–∏–∫–∞ –í–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
async def hot_handler(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    mesID = callback.message.message_id

    vokeb = await state.get_data()
    order_mes = vokeb.get("order_mes")
    order_chat = vokeb.get("order_chat")

    car_id = int(callback.data.split("_", 1)[1])

    car = await orm_get_car(session, car_id)
    if car.electrocar == "yes":
        car_info = (f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
'''                       
            )
        
    if car.electrocar == "no":
        car_info = (f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥

üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
'''                       
            )

    await bot.edit_message_caption(
        callback.message.chat.id,
        mesID,
        caption = f'''
–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 5-10 –º–∏–Ω—É—Ç üïù
''', 
        parse_mode='HTML'
    )

    await bot.send_message(
        await orm_get_managers_group(session),
        f'''
–ó–∞–∫–∞–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è #Ô∏è‚É£{car_id}
{car_info}

‚¨áÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞‚¨áÔ∏è
''',
       parse_mode='HTML' 
    )

    forwarded_message = await bot.forward_message(
        chat_id=await orm_get_managers_group(session), 
        from_chat_id=callback.message.chat.id, 
        message_id=order_mes
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await orm_add_dialog(
        session, 
        client_id=order_chat, 
        client_message_id=forwarded_message.message_id  # ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )


@user_find_auto.callback_query(F.data.startswith("0_15000"))
@user_find_auto.callback_query(F.data.startswith("15000_20000"))
@user_find_auto.callback_query(F.data.startswith("20000_30000"))
@user_find_auto.callback_query(F.data.startswith("30000_1000000"))
async def prev_car(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    car_cost = callback.data
    vokeb = await state.get_data()
    del_mes = vokeb.get("send_message")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if del_mes:
        await bot.delete_message(callback.message.chat.id, del_mes)

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    admins_ids, adminss, managers_ids, managerss = await get_admins_and_managers(session)

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    min_val, max_val = map(float, car_cost.split('_'))
    cars = await orm_get_cars_by_cost(session, min_val, max_val)  # —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ

    if cars:
        total_cars = len(cars)
        await state.update_data(cars_list=cars, current_index=0)
        car = cars[0]
        car_id = car.car_id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–æ–º
        if car.electrocar.lower() == "yes":  # –∏—Å–ø—Ä–∞–≤–∏–ª –Ω–∞ lower(), —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
            car_info = (
                f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥
üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: {int_format(car.power_reserve)} –∫–º
‚úÖ –ë–∞—Ç–∞—Ä–µ—è: {int_format(car.power_bank)} –∫–í—Ç—á
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
''')

            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
            if callback.from_user.id in admins_ids or callback.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        elif car.electrocar.lower() == "no":
            car_info = (
                f'''
{car.mark} {car.model} {car.package}, {car.year} –≥–æ–¥
üí∞ –¶–µ–Ω–∞: ${int_format(car.cost)} —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (40-60 –¥–Ω–µ–π)

‚úÖ –ü—Ä–æ–±–µ–≥: {int_format(car.route)} –∫–º
‚úÖ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {car.engine_type} 
‚úÖ –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.engine_volume} –ª
‚úÖ –ú–æ—â–Ω–æ—Å—Ç—å: {int_format(car.power)} –ª.—Å.
‚úÖ –ü—Ä–∏–≤–æ–¥: {car.weel_drive}
‚úÖ –ö—É–∑–æ–≤: {car.body}
\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {total_cars}
''')

            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
            if callback.from_user.id in admins_ids or callback.from_user.id in managers_ids:
                car_info += f"#Ô∏è‚É£{car_id} –Ω–æ–º–µ—Ä –∞–≤—Ç–æ"

        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ `electrocar` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
            car_info = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è electrocar!"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        btns = {'–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}'}
        if len(cars) > 1:
            btns = {
                '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ': 'left',
                '–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è': 'right',
                '–ó–∞–∫–∞–∑–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫': f'get_{car_id}',
            }

        send_message = await callback.message.answer_photo(
            photo=car.photo,
            caption=car_info,
            parse_mode="HTML",
            reply_markup=get_callback_btns(btns=btns),
        )
        await state.update_data(send_message=send_message.message_id)
    else:
        send_message = await callback.message.answer("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ —Ç–∞–∫–æ–π —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.update_data(send_message=send_message.message_id)
